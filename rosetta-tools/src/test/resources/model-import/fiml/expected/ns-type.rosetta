namespace test.ns : < "test.ns definition" >
version "${project.version}"

typeAlias CanonicalBoolean: <"A restriction of boolean that only accepts \'true\' and \'false\'">
	boolean

typeAlias NonNegativeDecimal: <"A decimal value greater than or equal to zero * This type is also available in FpML from version 4-3+">
	number(min: 0.0)

typeAlias NullableBoolean: <"Extension of (canonical) boolean, accepting values \'true\', \'false\' and \'null\' (undefined/undetermined)">
	string(pattern: "false|null|true")

typeAlias PositiveDecimal: <"A decimal value greater than zero * This type is also available in FpML from version 4-3">
	number(min: 0.0)

typeAlias LinkIdentifier: string(pattern: "[a-zA-Z0-9]+([_:.-][a-zA-Z0-9]+)*|")

typeAlias TradeIdentifier: string(pattern: "[a-zA-Z0-9]+([_:.-][a-zA-Z0-9]+)*")

typeAlias TradeEventTaxonomy: <"Trade event taxonomy definitions (implemented via patterns, so not strictly an enumeration ...)">
	string(pattern: "Trade:Inception(:(AccountTransfer|Allocation|Compression(:TriOptima)?|Execution|Exercise(:Physical)?|IndexTransition|Migration|Netting|Novation(:(Full|Partial))?(:(RemainingParty|StepIn))?|PortfolioAssignment))?|Trade:Inception:Interlife:(Extension|Initial|InterestPayout|Partial|Reprice|Rerate|Rollover|SpreadChange|Substitution)(:(Continuous|Discontinuous))?|Trade:Amendment(:(Clearing|Recoupon|Restructure))?|Trade:Amendment(:(Close|Extension|Reprice|Rerate|Rollover|SpreadChange|Substitution))|Trade:Cancellation(:Block)?|Trade:Cancellation:Interlife:Break(:(Continuous|Discontinuous))?|Trade:Correction(:(Assignment(:LCH)?|Counterparty(:(Change|Merger))|Economic(:(Quantity|Price|Term))?|Holiday|IndexCessation|NonEconomic|Portfolio|ServiceExit|Technical(:(Affirmation|Confirmation))?))?|Trade:Correction:Clearing|Trade:Termination:Full(:(Expiry|IndexTransition|Netting|PortfolioAssignment))|Trade:Termination(:(Full|Partial))(:(Allocation(:Block)?|Compression(:TriOptima)?|Exercise(:(Cash|Physical))?|Novation(:(RemainingParty(:GiveUp)?|StepOut))?|Unwind))?|Trade:Termination:Interlife:(Extension|InterestPayout|Partial|Reprice|Rerate|Rollover|SpreadChange|Substitution)(:(Continuous|Discontinuous))?|Trade:Undo:Inception(:Novation)?|Trade:Undo:(Cancellation|Correction|Amendment(:Restructure)?)|Trade:Undo:Termination(:(Full|Partial))(:(Exercise(:(Cash|Physical))?|Expiry|IndexTransition|Novation(:(RemainingParty(:GiveUp)?|StepOut))?|PortfolioAssignment|Unwind))?")

typeAlias FpMLVersionEnum: <"Indicate which version of the FpML Schema an FpML message adheres to.">
	string(pattern: "5-(0|[1-9][0-9]{0,2})")

type FxOption: <"fxOption product element with FiML extension content FiML extended product definition: extends FpML FxOption with additional optional content (bullionSettlement)">
	[rootType]

	bullionSettlement FxBullionSettlement (0..1)

type FxSingleLeg: <"fxSingleLeg product element with FiML extension content Extends FpML FxSingleLeg">
	[rootType]

	spotDate date (0..1) <"Spot date for the exchanged currency pair with respect to the trade date (i.e. the value date for exchangeRate/ spotRate).">
	fxSingleLegSequence0 FxSingleLegSequence0 (0..1)
	fxSingleLegSequence1 FxSingleLegSequence1 (0..1)
	bullionSettlement FxBullionSettlement (0..1) <"Bullion settlement properties. This component may be required where one of the trade currencies is a precious metal (e.g. XAU, XPT), and should not be produced otherwise.">

	condition Choice:
		optional choice fxSingleLegSequence0, fxSingleLegSequence1

type FloatingRateCalculation extends FloatingRate: <"Extended floating rate calculation definition, supporting index spread calculation (compatible with FpML FloatingRateCalculation) Extended FloatingRateCalculation definition, supporting index spread calculation (compatible with FpML FloatingRateCalculation)">
	[rootType]

type InflationRateCalculation: <"Extended inflation rate calculation definition. Extended InflationRateCalculation definition">
	[rootType]

	calculationMethod InflationCalculationMethodEnum (0..1) <"Indicates how to use the inflation index to calculate the payment (see documentation for InflationCalculationMethodEnum).">
	inflationRateCalculationSequence InflationRateCalculationSequence (0..1)
	redemptionAmountCalculation InflationRedemptionAmountCalculation (0..1) <"To be specified only for inflation products that embed a redemption payment e.g. inflation asset swap.">

type Amendment: <"Referenceable fpml:amendment element">

type Increase: <"Referenceable fpml:increase element">

type Novation: <"Referenceable fpml:novation element">

type OptionExercise: <"Referenceable fpml:optionExercise element">

type OptionExpiry: <"Referenceable fpml:optionExpiry element">

type Party: <"Referenceable fpml:party element">

type PartyTradeIdentifier extends ReportingPartyTradeIdentifier: <"Referenceable instance of ReportingTradeIdentifier  * Structurally compatible with fpml:PartyTradeIdentifier, but omitting linkId, allocationTradeId, blockTradeId (not used in regulatory reporting context).">
	[rootType]

type ReportingRegime: <"Referenceable fpml:reportingRegime element">

type Termination: <"Referenceable fpml:termination element">

type Trade: <"Referenceable fpml:trade element">

type TradeIdentifier: <"Referenceable fpml:tradeIdentifier element">

type TradingEvent: <"Referenceable fpml:tradingEvent element. This component may be used to supplement the reported event with a summary representation, as used to make a \"snapshot\" report to DTCC GTR.">

type Withdrawal: <"Referenceable  fpml:withdrawal element">

type FiML:
	[rootType]

	messageHeader MessageHeader (1..1)
	correlationModel CorrelationModel (0..1)
	messageModel MessageModel (1..1)
	version FiMLVersionEnum (1..1)
	fpmlVersion FpMLVersionEnum (1..1)

type GenericProduct: <"Product definition extending FpML GenericProduct with optional unbounded collection of additionalPayment (deprecated), plus bullion|cash settlement properties. Extends FpML GenericProduct with optional unbounded collection of additionalPayment (deprecated), plus bullion|cash settlement and commodity extension properties.">
	[rootType]

	additionalPayment string (0..*) <"Additional payments between the principal parties e.g. upfront fee, periodic premium.  * Deprecated: superseded by addition of additionalPayment in FpML GenericProduct model (FpML-5-10).">
	genericCommodityExtensionsModel GenericCommodityExtensionsModel (0..1)
	bullionSettlement FxBullionSettlement (0..1) <"Bullion settlement properties. This component may be required where one of the trade currencies is a precious metal (e.g. XAU, XPT), and should not be produced otherwise.">
	cashSettlement string (0..1) <"Indicates that the settlement will be cash, and specifies the settlement currency, plus provision for fixing details.">

	condition Choice:
		optional choice bullionSettlement, cashSettlement

type ReferenceEntity extends LegalEntityAsset: <"Referenceable instance of LegalEntityAsset, capable of being deployed as an underlyingAsset e.g. in the context of a BasketConstituent">
	[rootType]

type Break extends InterLifeBreak: <"Interlife break">

type CashRepricing extends CashRepricingEvent: <"Global element representing cash repricing.">

type Close extends InterLifeEvent: <"Interlife close event">

type CollateralSubstitution extends CollateralSubstitutionEvent: <"Global element representing a collateral substitution.">

type CouponEvent extends MidLifeEvent: <"Global element representing a coupon event. This structure is used for Buy-Sell Back trades to describe when a coupon is paid and what reinvestment rate will be applied. the amount is in the instrument currency. To be able to represent a buy/sell back with more than one collateral we use an href link to the underlying asset. This enables us to represent multiple coupons during the life of the trade, with different reinvestment rates, and possibly different instruments.">

	currency string (0..1) <"The currency in which an amount is denominated.">
	couponAmount string (1..1) <"The cash value of the coupon paid (not the coupon rate). It should be equal to the coupon rate divided by frequency (2\tfor semi annual) times the notional of the bond.">
	reinvestmentRate number (1..1) <"The reinvestment rate we will use on the coupon. Very often it is equal to the repo rate on the deal, but it does not have to. For very long term repos, the reinvestment rate will be derived from a curve.">
	reinvestmentAmount number (0..1) <"The reinvestment interest amount (extension to FpML model).  *** TODO *** Consider renaming e.g. to reinvestmentInterest [Amount]">
	assetReference string (1..1)
	transfer Transfer (0..1) <"The transfer structure can be used to explicitly state who will pay the coupon. In buy-sell-back trades, whoever holds the bond will receive the coupon (from the bond issuer) and keep it. If the bond holder passes the coupon on to the counterparty we expect to see a transfer from bond holder to counterparty here.">

type FeeRateChange extends RateChangeEvent: <"Global element representing a fee rate change.">

type InterestPayout extends InterestPayoutEvent: <"Global element representing an interest payout.">

type MarkToMarketEvent extends MidLifeEvent: <"Global element representing a nominal repricing. A mark to market event. This type of event is an adjustment of the price of the underlying collateral done to reflect current market conditions. Depending on the direction of the collateral valuation, one of the contracting parties will either pledge more/less collateral in the contract, or add/substract cash from the contract value.">

	collateral CollateralValuation (1..1) <"The updated collateral valuation for the contract. The change compared to the previously agreed valuation determines what securities or cash movement will occur.">
	combinedInterestPayout boolean (1..1) <"Indicates that the parties agree to settle the accrued interest on the contract at the time of the repricing.">
	transfer Transfer (0..1) <"Participants may use this structure to explicitly restate who is receiving/delivering cash and securities.">

type MidLifeEvent extends EventBase: <"Abstract placeholder for repo mid life events. A mid life event in a repo or securities lending transaction. Such mid life events are bilateral agreements between contracting parties to alter the financial profile of the transaction. Such examples include interest payments, collateral substitutions, or mark-to-market activity (cash or nominal repricing) to re-balance the valuation of cash and collateral in the transaction.">

	eventDate string (1..1) <"The date the event has been recorded.">

type Open extends InterLifeEvent: <"Interlife open event">

type RateChange extends RateChangeEvent: <"Global element representing a rate change.">

type RateObservation extends RateObservationEvent: <"Global element representing rate observation.">

type Repo: <"Global element representing a Repo transaction. A Repo, modeled as an FpML:Product.">
	[rootType]

	fixedRateSchedule string (0..1) <"The fixed repo rate. It is usually fixed for the duration of the agreement but can be changed with mid-life events (rate changes) except for buy SellBack trades.">
	repoSequence0 RepoSequence0 (0..1)
	dayCountFraction string (1..1) <"The day count fraction (calculation basis) applicable to the repo interest calculation.">
	repoSequence1 RepoSequence1 (0..1)
	repoSequence2 RepoSequence2 (0..1)
	repoSequence3 RepoSequence3 (0..1)
	margin Margin (1..*) <"The margin, or haircut, to be applied. A single margin may be specified for the transaction as a whole; or individual margin requirements may be specified for multiple pieces of collateral, in which case the collateral asset to which the margin applies is referenced by element assetReference, in the same way as under [spot|forward]Leg/collateral.">
	spotLeg RepoSpotTransactionLeg (1..1) <"A repo contract is modeled  as two purchase/repurchase transactions which are called legs. This is the spot leg, i.e. the transaction that will be executed on the settlement date of the contract.">
	forwardLeg RepoForwardTransactionLeg (0..1) <"The forward leg of the repo contract, i.e. the repurchase transaction.">
	midLifeEvent MidLifeEvent (0..*)
	bondEquityModel BondEquityModel (1..*)
	billable CanonicalBoolean (1..1) <"Specify whether any fee is payable on a periodic basis (true)* or at term (false).   * usually monthly netted on open positions with counterparty">
	paymentFrequency string (0..1) <"Time \"period\" and \"periodMultiplier\", describing frequency of payments for the floating rebate rate. Usually, the payment frequency is monthly, or daily. Business rule: Floating Rate Payment Frequency may be specified, in case of Floating Rebate Rate. (The assumption is that fee payment and rebate fixed rate payment are term payments, and rebate floating rate payment is periodic payment.)">
	triParty TriPartyInformation (0..1) <"Tri-party information: agent, set identifiers.">
	maximumSubstitutions int(min: 0) (0..1) <"Maximum number of substitutions (collateral substitution events) permitted during the term of the contract.">

	condition Choice:
		required choice fixedRateSchedule, repoSequence0

	condition Choice:
		required choice repoSequence2, repoSequence3

type LoanDeposit: <"Global element representing a loan or deposit product A type that describes a Loan Deposit derived from FpML Product.">
	[rootType]

	loanDepositModel LoanDepositModel (1..1)

type Bond: <"Global element representing a Bond instrument. Extended Bond definition: a debt security.">
	[rootType]

	bondReferenceDataModel BondReferenceDataModel (1..1)

type BondContract: <"Global element representing a transaction in a Bond instrument. Type derived from FpML Product, describing a cash Bond transaction.">
	[rootType]

	buyerSellerStrictModel BuyerSellerStrictModel (0..1)
	bondContractModel BondContractModel (1..1)

type Future extends FutureCore:
	[rootType]

	settlementType string (0..1) <"Settlement method for the contract (Cash, Physical). This value is used to populate the \"Delivery Type\" field for regulatory reporting (CFTC, ESMA).">

type Option extends ExchangeTradedOption:
	[rootType]

type CommoditySpreadLeg extends CommodityPriceSpreadLeg: <"FiML Commodity price spread leg.">
	[rootType]

type CommodityForward: <"Extended commodityForward Extend FpML product type with addition of optional floating payment/fixing schedule.">
	[rootType]

	additionalPayment string (0..*) <"Additional payments between the principal parties e.g. upfront fee, periodic premium.">
	schedule CommodityScheduleFloating (0..2) <"Commodity floating payment/fixing schedule. In the case where multiple schedules exist (up to two), each schedule should reference the commodity swap leg to which it relates by means of the legReference element.  * A single schedule without legReference is construed as applying to the parent commoditySwap as a whole.">

type CommodityOption: <"Extended commodityOption Extend FpML product type with addition of optional floating payment/fixing schedule.">
	[rootType]

	schedule CommodityScheduleFloating (0..1) <"Commodity floating payment/ fixing schedule.">

type CommoditySwap: <"Extended commoditySwap Extend FpML product type with addition of optional floating payment/fixing schedule.">
	[rootType]

	additionalPayment string (0..*) <"Additional payments between the principal parties e.g. upfront fee, periodic premium.">
	schedule CommodityScheduleFloating (0..2) <"Commodity floating payment/fixing schedule. In the case where multiple schedules exist (up to two), each schedule should reference the commodity swap leg to which it relates by means of the legReference element.  * A single schedule without legReference is construed as applying to the parent commoditySwap as a whole.">

type FloatingLeg extends CommodityFloatingPriceLeg: <"FiML Commodity floatingLeg, interchangeble with FpML floatingLeg">
	[rootType]

type SecurityLending: <"Product definition extending FpML SecurityLending with optional collateral instance, for use in cash-collateralised transaction. Product re-definition to support deliveryMethod value \"Open:Term\", extending content model of FpML SecurityLending with optional collateral instance for use in cash-collateralised transaction.">
	[rootType]

	secLendPrincipalModel SecLendPrincipalModel (1..1)
	secLendDurationModel SecLendDurationModel (1..1)
	secLendFeeRebateModel SecLendFeeRebateModel (1..1)
	secLendProvisionsModel SecLendProvisionsModel (1..1)
	collateral string (0..1)

type FxSingleLegSequence0:

	forwardValueDate date (1..1) <"Value date of the associated FX Swap/Far leg (FX Swap Forward/Far value date).">
	forwardRate PositiveDecimal (0..1) <"Exchange rate of the associated FX Swap/Far leg (FX Swap Forward/Far rate).">

type FxSingleLegSequence1:

	nearValueDate date (1..1) <"Value date of the associated FX Swap/Near leg (FX Swap Spot/Near value date).">
	nearRate PositiveDecimal (0..1) <"Exchange rate of the associated FX Swap/Near leg (FX Swap Spot/Near rate).">

type CorrelationId: <"A type defining a correlation identifier and qualifying scheme">

	value string (1..1)
	correlationIdScheme string(pattern: "\\w+:(\\/?\\/?)[^\\s]+") (0..1)

type MessageHeader: <"A standard message header structure">

	messageId MessageIdentifier (1..1) <"Unique identifer for the message constituted by the context document. At a minimum, the identifier must be unique on the scope of the interface in which the message is exchanged i.e. no other message exchanged in the interface at any point in time can have the same identifier,">
	inReplyTo MessageIdentifier (0..1) <"Identifier of a preceding message, in response to which the context message is produced.">
	messageHeaderModel MessageHeaderModel (1..1)
	messageInformation MessageInformation (0..1) <"Optional additional information relating to how the context message is interpreted or processed.">

type MessageIdentifier:

	value string (1..1)
	messageIdentifierScheme string(pattern: "\\w+:(\\/?\\/?)[^\\s]+") (0..1)

type MessageInformation: <"Additional information relating to how the context message is interpreted or processed.">

	relatedMessage RelatedMessage (0..*) <"Identification of related message(s) associated with the context message.">
	messageInteraction MessageInteraction (0..1) <"Specification of required messaging interactions with the messaging target.   This block allows the message producer to specify in granular fashion which messages (responses, notifications) are expected, and/or to be suppressed, in the interaction initiated by the context message.">

type MessageInteraction: <"Specification of required message interactions with the messaging target (expected, suppressed).">

	suppress MessageInteractionMode (0..1) <"Messages (normally expected) which are to be suppressed in the interaction initiated by the context message.">
	messageInteractionSequence MessageInteractionSequence (0..1)

	condition Choice:
		one-of

type MessageInteractionSequence:

	expected MessageInteractionMode (1..1) <"Messages which are expected (required) in the interaction initiated by the context message.">
	suppress MessageInteractionMode (0..1) <"Messages (normally expected) which are to be suppressed in the interaction initiated by the context message.">

type MessageInteractionMode: <"Information concerning the expected interaction with the messaging target (responses, notifications).">

	messageInteractionModeChoice MessageInteractionModeChoice (1..*)

type MessageInteractionModeChoice:

	notification MessageInstanceNotificationEnum (0..*) <"Notification message name.">
	response MessageInstanceResponseEnum (0..*) <"Response message name.">

	condition Choice:
		one-of

type MessageParticipant:

	messageParticipantSequence MessageParticipantSequence (0..1)
	address string (0..1) <"Network address (e.g. URI) for an application or service which particpates in an automated message exchange">

	condition Choice:
		one-of

type MessageParticipantSequence:

	systemId SystemIdentifier (1..1) <"A unique identifier for an application or  service which participates in an automated message exchange.">
	instanceId SystemIdentifier (0..1) <"Instance identifier, where required to identify an instance of an application or service which is deployed e.g. at multiple locations.">

type MessageRejected:

	reason Reason (1..*)
	additionalData AdditionalData (0..1)

type RelatedMessage:

	messageId MessageIdentifier (1..1)
	messageHeaderModel MessageHeaderModel (0..1)

type CorrelationModel: <"Message correlation and sequencing mechanism. The correlation id is used to link messages whcih relate to a common business object, typically a business event. The correlated collection of messages may constitute a series of notifications, or a conversational exchange (request-response or advice-acknowledgment pattern); for example, an initial advice followed by subsequent corrections and/or retraction.">

	correlationId CorrelationId (1..1) <"An identifier used to associate messages which relate to a common business object e.g. a business event.">
	sequenceNumber int(min: 1) (0..1) <"A number used to establish relative ordering between messages carrying a common correlation id. Sequence number values must be strictly ascending, but are not necessarily contiguous.">

type MessageHeaderModel:

	sentBy MessageParticipant (1..1) <"The message sender (application or service).">
	sendTo MessageParticipant (1..1) <"The designated recipient to which the message is sent (application or service).">
	copyTo MessageParticipant (0..*) <"Secondary recipient(s) to which the message is copied (application or service instance(s)).">
	creationTimestamp zonedDateTime (1..1) <"Technical timestamp for creation of the context message.">

type AdditionalData: <"Supplementary information to assist explanation and/or resolution of a reported exception.">

	text string (0..1) <"Additional text data that may help understand and resolve the issue.  If the additional information is formatted as xml, the text must be placed within a CDATA section to prevent its interpretation as xml content.">
	originalMessage string (0..1) <"The xml text of a message which is the subject of the exception report may be included directly within this structure.">

	condition Choice:
		one-of

type AffirmationMode:

	value string (1..1)
	affirmationModeScheme string(pattern: "\\w+:(\\/?\\/?)[^\\s]+") (0..1)

type AffirmationService extends ExternalService:

	affirmationStatus AffirmationStatus (0..1) <"The current state of the trade event within the affirmation process.">
	affirmationMode AffirmationMode (0..1) <"The mode of interaction with the affirmation service e.g. \"Double-sided\"">

type AffirmationStatus:

	value string (1..1)
	affirmationStatusScheme string(pattern: "\\w+:(\\/?\\/?)[^\\s]+") (0..1)

type AuditableBase: <"Abstract base type for auditable content (system/user identification with timestamp).">

	auditModel AuditModel (0..1)

type BookingEvent:

	timestamp zonedDateTime (1..1)

type BookingInformation:

	marketerBookingModel MarketerBookingModel (1..1)
	traderBookingModel TraderBookingModel (1..1)

type BusinessLocation:

	country string (1..1)
	businessCenter string (0..1)

type Collateral: <"Collateral information.">

	creditSupportAnnexModel CreditSupportAnnexModel (1..1)

type ConfirmationService extends ExternalService:

	confirmationStatus ConfirmationStatus (1..1)

type ConfirmationStatus:

	value string (1..1)
	affirmationStatusScheme string(pattern: "\\w+:(\\/?\\/?)[^\\s]+") (0..1)

type CreditRating:

	agency CreditRatingAgency (1..1)
	rating CreditRatingValue (1..1)
	date date (0..1)

type CreditRatingAgency:

	value string (1..1)
	creditRatingAgencyScheme string(pattern: "\\w+:(\\/?\\/?)[^\\s]+") (0..1)

type CreditRatingValue:

	value string (1..1)
	creditRatingValueScheme string(pattern: "\\w+:(\\/?\\/?)[^\\s]+") (0..1)

type CreditSupportAnnexIdentifier: <"Credit Support Annex Id: legal or front-office (synthetic)">

	value string (1..1)

type CreditSupportAnnexProductType: <"Credit Support Annex product type: ALGO product code for determination of CSA id">

	value string (1..1)

type CreditSupportAnnexRegulatory: <"Legal CSA ids and associated properties, required to support Algo feeds in the context of BCBS/IOSCO margin requirements for non-centrally cleared derivatives,">

	lookupDate date (1..1) <"CSA lookup date">
	productSubType CreditSupportAnnexProductType (0..1) <"Algo product subtype, used to determine exclusions from jurisdiction.">
	variationMarginId CreditSupportAnnexIdentifier (0..1) <"Legal Variation Margin CSA id">
	initialMarginPayId CreditSupportAnnexIdentifier (0..1) <"Legal Initial Margin (Pay) CSA id">
	initialMarginReceiveId CreditSupportAnnexIdentifier (0..1) <"Legal Initial Margin (Receive) CSA id">

type DeskLocation:

	partyLocationModel PartyLocationModel (1..1)

type ElectronicPlatform:

	gatewayId GatewayId (1..1) <"Standardised identifier for trade processing channel.">

type EntitySigning: <"Entity signing properties: produced for a transaction which is a component of an entity signing relationship.">

	mode EntitySigningMode (1..1) <"The role of the transaction in the entity signing relationship (Booking Entity vs Signing Entity; Signing Entity vs Booking Entity; Signing Entity vs External Counterparty)">

type EntitySigningMode: <"The role of the transaction in the entity signing relationship (Booking Entity vs Signing Entity, Signing Entity vs Booking Entity, Signing Entity vs External Counterparty)">

	entitySigningModeScheme string(pattern: "\\w+:(\\/?\\/?)[^\\s]+") (0..1)

type EventBase: <"Abstract type defining the basic structure of FiML business events; it is refined by its derived types.">

	eventId EventId (0..*)

type EventId: <"Unique identifier for a business event e.g. identifier assigned by the originating system for a business event which is the subject of the containing message.">

	value string (1..1)
	eventIdScheme string(pattern: "\\w+:(\\/?\\/?)[^\\s]+") (0..1)

type ExceptionReason extends Reason: <"Describes reason for a processing exception">

	location ProblemLocation (0..1) <"The location in the document where the problem originates, expressed as an XPath expression.">
	additionalData AdditionalData (0..*) <"Additional text data values that may help understand and resolve the issue.  If the additional information is formatted as xml, the text must be placed within a CDATA section to prevent its interpretation as xml content.">

type ExecutionMethod: <"A code representing the method by which trade execution is performed (execution model).  * Note: the default FiML scheme URI may be superseded by a FpML scheme, subject to adoption in the public standard.">

	executionMethodScheme string(pattern: "\\w+:(\\/?\\/?)[^\\s]+") (0..1)

type ExecutionVenueId:

	executionVenueScheme string(pattern: "\\w+:(\\/?\\/?)[^\\s]+") (0..1)

type ExecutionVenueInformation: <"Properties which identify a trade execution venue (electronic market, SEF, DCM ...).">

	partyReference string (0..1) <"A reference to the party identified as the execution venue (to support the case where the execution venue is identified as a party in the transaction, as per a broker).">
	executionVenueInformationSequence ExecutionVenueInformationSequence (0..1)
	id string (0..1)

	condition Choice:
		required choice partyReference, executionVenueInformationSequence

type ExecutionVenueInformationSequence:

	executionVenueInformationSequenceSequence ExecutionVenueInformationSequenceSequence (0..1)
	venueName string (0..1) <"Long-form name of the execution venue.">
	location BusinessLocation (0..1) <"Location of the execution venue (country of incorporation, business center) for regulatory purposes.">

	condition Choice:
		required choice executionVenueInformationSequenceSequence, venueName

type ExecutionVenueInformationSequenceSequence:

	venueId ExecutionVenueId (1..1) <"An identifier for the execution venue.">
	venueName string (0..1) <"Long-form name of the execution venue.">

type ExternalService: <"Base properties of an external trade processing service.">

	externalServiceModel ExternalServiceModel (1..1)
	id string (0..1)

type ExternalServiceName: <"Name of an external trade processing service (e.g. SwapClear, DSMatch).">

	value string (1..1)
	serviceNameScheme string(pattern: "\\w+:(\\/?\\/?)[^\\s]+") (0..1)

type ExternalServiceProvider: <"Name of the provider of an external trade processing service (e.g. LCH, MarkitServ).">

	value string (1..1)
	serviceProviderScheme string(pattern: "\\w+:(\\/?\\/?)[^\\s]+") (0..1)

type FxBullionSettlement: <"Bullion settlement properties: may be required where one of the trade currencies is a precious metal (e.g. XAU, XPT), and should not be produced otherwise.">

	currency string (1..1) <"The bullion currency e.g. XAU, XAG, XPT...">
	fxBullionAccountModel FxBullionAccountModel (0..1)
	fxBullionSettlementModel FxBullionSettlementModel (0..1)

type GatewayId: <"Standardised identifier for an electronic trade processing channel through which transactions are internalised e.g. from an execution venue or electronic market.">

	value string (1..1)
	gatewayIdScheme string(pattern: "\\w+:(\\/?\\/?)[^\\s]+") (0..1)

type InstitutionalSector: <"Institutional Sector e.g. ESA 2010 institutional sector code.">

	value string (1..1)
	institutionalSectorScheme string(pattern: "\\w+:(\\/?\\/?)[^\\s]+") (0..1)

type LinkedTradeInformation: <"Relevant properties of an associated transaction e.g. ancestor/originating trade.">

	identifierReference Reference (0..1)

type LocationIdentifier: <"Code identifying a physical location e.g. business center, place of incorporation.">

	value string (1..1)
	locationIdentifierScheme string(pattern: "\\w+:(\\/?\\/?)[^\\s]+") (0..1) <"Scheme specifying the value domain of the location code (CRDS location code, by default).">

type MatchingService extends ExternalService: <"An external service dedicated to trade matching (e.g. MarkitSERV DSMatch).">

	matchingStatus MatchingStatus (0..1) <"The current state of the trade event within the matching process.">

type MatchingStatus: <"Current state of the transaction record within an external matching process.">

	value string (1..1)
	matchingStatusScheme string(pattern: "\\w+:(\\/?\\/?)[^\\s]+") (0..1)

type PartyClientRelationship: <"A party which acts in an agency capacity on behalf of a client (third party).">

	partyReference string (1..1)
	clientPartyReference string (0..1)

type PartyLocation:

	partyLocationModel PartyLocationModel (1..1)

type PersonIdentification:

	personReference string (0..1) <"A reference to a person object located elsewhere in the document  (within a fpml:party block)">
	personId string (0..1) <"Identifier code for a person e.g. CRDS employeee code.">

	condition Choice:
		one-of

type PersonLocation extends PersonIdentification:

	location BusinessLocation (1..1)

type PersonLocation0:

	personLocationModel PersonLocationModel (1..1)

type Portfolio: <"A structure referencing a portfolio used to record and manage a trade">

	partyReference string (1..1) <"A reference to the party (trade side) with which this portfolio is associated.">
	portfolioId PortfolioIdentifier (1..1) <"A unique identifier for the portfolio under the specfied scheme e.g. CRDS portfolio number.">

type PortfolioIdentifier:

	value string (1..1)
	portfolioIdentifierScheme string(pattern: "\\w+:(\\/?\\/?)[^\\s]+") (0..1)

type PostTradeRiskReductionService extends ExternalService: <"An external service providing post-trade risk reduction (PTRR) facilities e.g. OSTTRA (formerly Trioptima) triReduce (multilateral portfolio compression).">

	riskReductionOperation PostTradeRiskReductionOperation (0..1) <"Style of post-trade risk reduction operation supported by the service e.g. PortfolioCompression, PortfolioRebalancing">

type PostTradeRiskReductionOperation: <"Style of post-trade risk reduction operation e.g. PortfolioCompression.">

	riskReductionOperationScheme string(pattern: "\\w+:(\\/?\\/?)[^\\s]+") (0..1)

type PreTradeControl: <"Support communication of TRUST pre-trade control results e.g. to ODIN via FIRE">

	ruleId PreTradeControlRuleId (1..1) <"Identifier for the pre-trade control rule.">
	controlPoint PreTradeControlPoint (0..1) <"Information relating to the control point (point of application of the rule). * This might be modelled as a global property, rather than at the level of the specific rule application (?).">
	result PreTradeControlResult (0..1) <"Outcome of the rule application">

type PreTradeControlPoint: <"Information relating to the control point (point of application of the rule/control).">

	timestamp zonedDateTime (1..1)

type PreTradeControlResult: <"Status and user decision with respect to a specific rule/control">

	status PreTradeControlComplianceEnum (1..1) <"Status with respect to the rule/control {Compliant, NonCompliant}.">
	description string (0..1) <"Diagnostic text relating to the status.">
	userDecision PreTradeControlResponseEnum (1..1) <"User decision with respect to the specific control {Accept, Reject}.">
	userComment UserComment (0..1) <"Comment text supplied by user in support of acceptance/rejection decision (mandatory in case of rejection). * User identity can be specified under the audit content.">

type PreTradeControlRuleId: <"Pre-trade control rule identifier">

	ruleIdScheme string(pattern: "\\w+:(\\/?\\/?)[^\\s]+") (0..1)

type PreTradeControlStatus: <"Compliance status with respect to pre-trade controls.">

	globalStatus PreTradeControlComplianceEnum (1..1) <"Overall compliance status with respect to all applicable pre-trade controls {Compliant, NonCompliant}.">
	userDecision PreTradeControlResponseEnum (1..1) <"User decision with respect to global status {Accept, Reject}">
	userComment UserComment (0..1) <"Comment text supplied by user in support of acceptance/rejection decision (mandatory in case of rejection). * User identity can be specified under the audit content.">
	control PreTradeControl (0..*) <"Specific pre-trade control(s).">

type ProblemLocation:

	xpath string (0..1) <"The location of the problem in the source document, represented as an XPath expression.">
	lexicalProblemLocationModel LexicalProblemLocationModel (0..1)

	condition Choice:
		one-of

type ProcessingInformation: <"Information about processing history of the reported trade e.g. processing status on external electronic platform.">

	processingInformationSequence0 ProcessingInformationSequence0 (0..1)
	processingInformationSequence1 ProcessingInformationSequence1 (0..1)
	processingInformationSequence2 ProcessingInformationSequence2 (0..1)
	processingInformationSequence3 ProcessingInformationSequence3 (0..1)
	processingInformationSequence4 ProcessingInformationSequence4 (0..1)

	condition Choice:
		one-of

type ProcessingInformationSequence0:

	preTradeControl PreTradeControlStatus (1..1)
	electronicPlatform ElectronicPlatform (0..1) <"Standardised reference data for electronic transaction platform (internal or external).">
	affirmation AffirmationService (0..1) <"Affirmation platform e.g. MarkitWire">
	matching MatchingService (0..1) <"Confirmation matching platform e.g  DSMatch">
	postTradeRiskReduction PostTradeRiskReductionService (0..1) <"Post-trade risk reduction (PTRR) service e.g. OSTTRA (formerly Trioptima) triReduce (multilateral portfolio compression).">

type ProcessingInformationSequence1:

	electronicPlatform ElectronicPlatform (1..1) <"Standardised reference data for electronic transaction platofrm (internal or external).">
	affirmation AffirmationService (0..1) <"Affirmation platform e.g. MarkitWire">
	matching MatchingService (0..1) <"Confirmation matching platform e.g. DSMatch">
	postTradeRiskReduction PostTradeRiskReductionService (0..1) <"Post-trade risk reduction (PTRR) operation performed by an external service e.g. OSTTRA (formerly Trioptima) triReduce (multilateral portfolio compression).">

type ProcessingInformationSequence2:

	affirmation AffirmationService (1..1) <"Affirmation platform e.g. MarkitWire">
	matching MatchingService (0..1) <"Confirmation matching platform e.g  DSMatch">
	postTradeRiskReduction PostTradeRiskReductionService (0..1) <"Post-trade risk reduction (PTRR) service e.g. OSTTRA (formerly Trioptima) triReduce (multilateral portfolio compression).">

type ProcessingInformationSequence3:

	matching MatchingService (1..1) <"Confirmation matching platform e.g  DSMatch">
	postTradeRiskReduction PostTradeRiskReductionService (0..1) <"Post-trade risk reduction (PTRR) service e.g. OSTTRA (formerly Trioptima) triReduce (multilateral portfolio compression).">

type ProcessingInformationSequence4:

	postTradeRiskReduction PostTradeRiskReductionService (1..1) <"Post-trade risk reduction (PTRR) service e.g. OSTTRA (formerly Trioptima) triReduce (multilateral portfolio compression).">

type Reason:

	reasonCode ReasonCode (1..1) <"A machine-interpretable code value indicating the reason for the exception.">
	description string (0..1) <"A human readable description of the problem. This element MUST NOT contain codified values used to control subsequent processing">

type ReasonCode: <"A machine-interpretable code for a processing exception.">

	value string (1..1)
	reasonCodeScheme string(pattern: "\\w+:(\\/?\\/?)[^\\s]+") (0..1)

type RegulatoryPartyRole:

	sourcePartyReference string (1..1) <"Reference to the party which is identified as the booking party for this trade (i.e. the BNP Paribas entity which manages the trading risk position).">
	counterPartyReference string (0..1) <"Reference to the party which is identified as the external counterparty for this trade.">
	regulatoryPartyRoleModel RegulatoryPartyRoleModel (1..1)

type SecurityClass:

	value string (1..1)
	securityClassScheme string(pattern: "\\w+:(\\/?\\/?)[^\\s]+") (0..1)

type SequencedNormalizedString: <"Normalized string + optional attribute sequenceNumber [positiveInteger]">

	value string (1..1)
	sequenceNumber int(min: 1) (0..1)

type SettlementInstructionSimple:

	partyReference string (1..1)
	settlementMethod SettlementMethod (1..1)

type SettlementMethod:

	value string (1..1)
	settlementMethodScheme string(pattern: "\\w+:(\\/?\\/?)[^\\s]+") (0..1)

type SettlementTransferAccount: <"Provides references to branch customer accounts.">

	settlementTransferAccountSequence SettlementTransferAccountSequence (0..1)
	securityAccountReference string (0..1)

	condition Choice:
		one-of

type SettlementTransferAccountSequence:

	cashAccountReference string (1..1)
	securityAccountReference string (0..1)

type SettlementTransferSimple:

	deliveryMethod DeliveryMethodEnum (1..1)
	safeCustody CanonicalBoolean (1..1)
	settlementInformationModel SettlementInformationModel (0..1)
	clientAccount SettlementTransferAccount (0..1) <"references to branch customer accounts.">
	id string (0..1)

type SystemIdentifier:

	value string (1..1)
	systemIdentifierScheme string(pattern: "\\w+:(\\/?\\/?)[^\\s]+") (0..1)

type SystemTradeIdentifier: <"Describes a source system trade identifier">

	systemId SystemIdentifier (1..1) <"A unique identifier for a system in which a trade is identified.">
	tradeId TradeIdentifier (1..1) <"A unique trade identifier within the identified system.">
	systemTradeIdentifierSequence SystemTradeIdentifierSequence (0..1)
	systemTradeLinkModel SystemTradeLinkModel (1..1)

type SystemTradeIdentifierSequence:

	versionNumber int(min: 0) (1..1) <"The integer version number of the trade in the identified system, where defined. Zero is a permitted value, intended for use in the case where version numbering commences at zero. Where no version number is defined, this element (and the corresponding version timestamp) must be omitted.">
	versionTimestamp zonedDateTime (0..1) <"The system timestamp for the version number of the trade, where defined,">

type SystemUserIdentifier:

	value string (1..1)
	systemUserIdentifierScheme string(pattern: "\\w+:(\\/?\\/?)[^\\s]+") (0..1)

type Tax:

	rate PositiveDecimal (1..1)

type UserComment extends AuditableBase: <"User-originated comment, with optional audit properties.">

	text SequencedNormalizedString (1..*) <"User-originated comment. Comments spanning multiple lines may optionally be represented as an ordered collection of \'text\' elements.">

type AuditModel: <"Properties relating to a audited action or event performed by a system service or user.">

	auditModelSequence AuditModelSequence (0..1)
	user PersonIdentification (0..1) <"The system user who initiated or performed the audited action/event in the system.">
	locationId LocationIdentifier (0..1) <"Location of the system instance or user for the event.">
	timestamp zonedDateTime (1..1) <"Audit timestamp for the event.">

	condition Choice:
		required choice auditModelSequence, user

type AuditModelSequence:

	systemId SystemIdentifier (1..1) <"A unique identifier for the system in which the audited event occurred.">
	instanceId SystemIdentifier (0..1) <"Instance of the identified system in which the audited event occurred (e.g. a location code).">
	user PersonIdentification (0..1) <"The system user who performed the audited action/event in the system.">

type BondNominalModel:

	nominalAmount string (1..1) <"Collateral nominal amount.">
	quantity int(min: 1) (0..1) <"The number of bonds bought or sold">
	denomination PositiveDecimal (0..1)

type BondPriceAndYieldModel: <"Bond price and related properties.  Adapted from BondPriceAndYield.model as published in the NonDerivative and Repo proposals to public FpML (originally from  JPMorgan/IBML).  Added: accruedCapitalisation, assetFactor*  Removed: relativePrice, interestStartDate, pool (AssetPool).  *substitutes for pool/initialFactor in FpML/IBML model">

	bondPriceAndYieldModelSequence0 BondPriceAndYieldModelSequence0 (0..1)
	dirtyPrice NonNegativeDecimal (0..1) <"Bond dirty price, expressed in percentage points, 100 is the initial value of the bond">
	yieldToMaturity number (0..1) <"Yield to maturity">
	accruedCapitalisation number (0..1) <"Accrued capitalisation, expressed as a rate value.  Note: value can be negative in an ex-dividend period.">
	bondPriceAndYieldModelSequence1 BondPriceAndYieldModelSequence1 (0..1)
	assetFactor PositiveDecimal (0..1)
	bondPriceAndYieldModelSequence2 BondPriceAndYieldModelSequence2 (0..1)

	condition Choice:
		required choice bondPriceAndYieldModelSequence0, dirtyPrice

type BondPriceAndYieldModelSequence0:

	cleanPrice number (1..1) <"Bond clean price, expressed in percentage points, 100 is the initial value of the bond">
	accruals number (0..1) <"Accruals: relationship is clean price plus accruals equals dirty price. All prices are expressed in percentage points, 100 is the initial value of the bond.  * This value can be negative e.g. when the value date falls between the ex-dividend date and coupon date.">
	dirtyPrice NonNegativeDecimal (0..1) <"Bond dirty price, expressed in percentage points, 100 is the initial value of the bond">

type BondPriceAndYieldModelSequence1:

	inflationFactor NonNegativeDecimal (0..1) <"The inflation factor is specified for inflation-linked products which require some additional elements to calculate prices correctly.">
	inflationCleanPrice NonNegativeDecimal (0..1) <"Product of inflation factor and clean price.">

type BondPriceAndYieldModelSequence2:

	bondPriceAndYieldModelSequenceSequence0 BondPriceAndYieldModelSequenceSequence0 (0..1)
	dividendStatus BondDividendStatusEnum (0..1) <"Specifies whether the bond is traded cum- or ex-dividend, or on a special dividend basis">
	bondPriceAndYieldModelSequenceSequence1 BondPriceAndYieldModelSequenceSequence1 (0..1)

type BondPriceAndYieldModelSequenceSequence0:

	accrualDayCount int (1..1) <"Days elapsed since start of current coupon period, for purposes of accrued interest calculation (day count fraction nominator).  * This value can be negative e.g. when the value date falls between the ex-dividend date and coupon date.">
	basisDaysInYear int(min: 1) (0..1) <"Interest calculation basis days (day count fraction denominator).">

type BondPriceAndYieldModelSequenceSequence1:

	previousCouponDate date (0..1) <"Date of the coupon payment following the bond contract settlement date (value date).">
	nextCouponDate date (1..1) <"Date of the coupon payment following the bond contract settlement date (value date).">

type BondSettlementAmountModel:

	settlementAmount string (1..1)
	underlyingAmount NonNegativeDecimal (0..1)

type BondValuationAmountModel:

	accruedCouponAmount number (1..1) <"The accrued interest amount for the current coupon period as at the value date, denominated in the native currency of the security (the currency of nominalAmount).  * This value can be negative e.g. when the value date falls between the ex-dividend date and coupon date.">
	accruedCapitalisationAmount number (0..1) <"Coupon re-investment amount at the value date, denominated in the native currency of the security (the currency of nominalAmount). \t\t\t\t\t Note: value can be negative in an ex-dividend period.">
	principalAmount NonNegativeDecimal (0..1) <"Nominal amount multiplied by the clean price, denominated in the native currency of the security (the currency of nominalAmount).">

type ClientMarginModel: <"A model group used to define client margin schedule">

	clientMarginSchedule string (1..1) <"The client margin associated with the spread on a fixed or floating rate.">

type CreditSupportAnnexModel:

	csaId CreditSupportAnnexIdentifier (0..1) <"Identifier for the applicable Credit Support Annex. By default, this is the \"Front Office CSA id\" allocated by the Falcon system (possibly a synthetic value).">
	csaProductType CreditSupportAnnexProductType (0..1) <"Product categorisation for the trade under the relevant CSA. By default, this is the product type used by ALGO (collateteral management system). This value is required in order to obtain the CSA id in the first instance (as a parameter to Westminster function call GetCollCSA[FromBranch]).">
	regulatoryCSA CreditSupportAnnexRegulatory (0..1) <"Legal CSA ids and associated properties, to support Algo feeds in the context of BCBS/IOSCO margin requirements for non-centrally cleared deriviatives,">

type ExternalServiceModel: <"Base properties of an external trade processing servce.">

	externalServiceModelSequence ExternalServiceModelSequence (0..1)
	serviceProvider ExternalServiceProvider (0..1) <"The commercial entity which supplies the service.">
	serviceProviderPartyReference string (0..1) <"Reference to the party which is the  commercial entity supplying the service.">

	condition Choice:
		one-of

type ExternalServiceModelSequence:

	serviceName ExternalServiceName (1..1) <"The name of the service.">
	serviceProvider ExternalServiceProvider (0..1) <"The commercial entity which supplies the service.">
	serviceProviderPartyReference string (0..1) <"Reference to the party which is the  commercial entity supplying the service.">

	condition Choice:
		optional choice serviceProvider, serviceProviderPartyReference

type FxBullionAccountModel:

	correspondentPartyReference Reference (1..1) <"Reference to the party acting as our correspondent for bullion delivery.">
	accountType FxBullionAccountTypeEnum (1..1) <"Account type for bulllion = {Allocated, Pooled, Unallocated}  * Pooled is construed as allocated pooled account; the unallocated pooled case is subsumed under Unallocated.">

type FxBullionDeliveryModel:

	deliveryLocation string (1..1)

type FxBullionSettlementModel: <"For bullion currencies, indicates whether the settlement will be cash or physical.">

	cashSettlement string (0..1) <"Indicates that the settlement will be cash, and specifies the settlement currency, plus provision for fixing details.">
	deliveryLocation string (0..1) <"Indicates that the settlement will be physical and provides the delivery location. The scheme http://www.fpml.org/coding-scheme/bullion-delivery-location allows values  such as London, Zurich or TBA if the delivery location needs to be agreed by the parties.">

	condition Choice:
		one-of

type LexicalProblemLocationModel:

	line int(min: 1) (1..1) <"The line number in the source document where the problem is located.">
	column int(min: 1) (0..1) <"The column number in the line where the problem data commences.">

type MarketerBookingModel: <"Actions/events performed by the marketer/sales person in a marketer-led trade capture workflow.">

	marketerOpened BookingEvent (0..1) <"Marketer opened the trade/event ticket.">
	marketerSaved BookingEvent (0..1) <"Marketer saved the trade/event ticket.">
	marketerSent BookingEvent (0..1) <"Marketer sent the trade/event ticket to trading desk (risk manager).">

type PartyLocationModel:

	businessUnitReference string (1..1)
	location BusinessLocation (1..1)

type PartyPortfolioModel:

	party string (1..*)
	portfolio Portfolio (0..*)

type PersonLocationModel:

	personReference string (1..1)
	location BusinessLocation (1..1)

type RegulatoryPartyRoleModel: <"Identifiable party roles relevant to determination of reporting party and/or purpose(s).">

	brokerPartyReference string (0..1) <"Reference to the party which is identified as the broker for this trade.">
	regulatoryPartyRoleModelSequence0 RegulatoryPartyRoleModelSequence0 (0..1)
	regulatoryPartyRoleModelSequence1 RegulatoryPartyRoleModelSequence1 (0..1)
	regulatoryPartyRoleModelSequence2 RegulatoryPartyRoleModelSequence2 (0..1)

	condition Choice:
		optional choice regulatoryPartyRoleModelSequence1, regulatoryPartyRoleModelSequence2

type RegulatoryPartyRoleModelSequence0:

	clearerPartyReference string (1..1) <"Reference to the party which is identified as the clearer (central counterparty/derivative clearing organisation) for this trade.">
	clearingBroker PartyClientRelationship (0..1)
	originalPartyReference string (0..1) <"Reference to the original counterparty to the pre-cleared trade (i.e. the Client party, in the case of client clearing).">

type RegulatoryPartyRoleModelSequence1:

	primeBrokerPartyReference0 string (1..1) <"Reference to a party which is identified as prime broker, in a prime-brokerage context.">
	executingBrokerPartyReference string (0..1) <"Reference to a party which is identified as executing broker, in a prime-brokerage context.">
	primeBrokerPartyReference1 string (0..1) <"Reference to a party which is identified as prime broker, in a prime-brokerage context.">

	condition Choice:
		optional choice executingBrokerPartyReference, primeBrokerPartyReference1

type RegulatoryPartyRoleModelSequence2:

	primeBroker0 PartyClientRelationship (1..1) <"Reference to a party which is identified as prime broker, in a prime-brokerage context.">
	executingBroker PartyClientRelationship (0..1) <"Reference to a party which is identified as executing broker, in a prime-brokerage context.">
	primeBroker1 PartyClientRelationship (0..1) <"Reference to a party which is identified as prime broker, in a prime-brokerage context.">

	condition Choice:
		optional choice executingBroker, primeBroker1

type SettlementModel: <"A group which has cash settlement elements.">

	settlementDate string (1..1) <"Settlement Date.">
	syntheticSettlementDate date (0..1) <"Synthetic settlement date: dedicated value to support reporting of Open repo as synthetic transaction under MMSR regime.">
	settlementModelSequence SettlementModelSequence (0..1)
	withholdingTax string (0..1)

type SettlementModelSequence:

	settlementFxRate FxRateSimple (1..1)
	underlyingAmount NonNegativeDecimal (0..1)

type SettlementInformationModel:

	standardSettlementStyle string (0..1)
	settlementInstruction SettlementInstructionSimple (0..2)

	condition Choice:
		one-of

type SystemTradeLinkModel:

	linkId LinkIdentifier (0..1) <"A link identifier allowing the trade to be associated with other related trades within the identified system.">
	blockTradeId LinkIdentifier (0..1) <"Identifier of a related block trade within the identified system; use is reserved for the case where the trade identified by the tradeId element results from an allocation operation on the parent block.">
	originatingTradeId LinkIdentifier (0..1) <"Identifier of the parent trade within the identified system; for use in the case where the trade identified by the tradeId element results from an operation (allocation. clearing, novation ...) on the parent trade.">

type TraderBookingModel: <"Actions/events performed by the trader in a trade capture workflow.">

	traderAccepted BookingEvent (0..1) <"Trader accepted the trade/event ticket from markter/sales person.">
	traderAffirmed BookingEvent (0..1) <"Trader accepted trade into position for risk management.">

type AmortisationParameters:

	amortisationParametersModel AmortisationParametersModel (1..1)

type CalculationPeriod: <"Extended CalculationPeriod definition.">

	accruedInterestAmount number (0..1) <"Interest amount accrued for the calculation period, in currency of the stream notional amount. This may be a pre-determined amount in the case of a fixed rate stream, or an amount calculated as the result of a fixing event on a floating rate stream.">

type CapFloorStream: <"Extended InterestRateStream definition for cap|floor.">

	annex CapFloorStreamAnnex (0..1)

type CapFloorStreamAnnex extends InterestRateStreamAnnex: <"CapFloorStream extended properties">

type FloatingRateIndexBase extends FloatingRateBase:

	indexTenorModel IndexTenorModel (0..1)
	spreadTenor SpreadTenor (0..2) <"Pair of index tenors with multipliers, representing a spread calculation across two tenors.">
	floatingRateParametersModel FloatingRateParametersModel (1..1)

	condition Choice:
		optional choice indexTenorModel, spreadTenor

type FloatingRate extends FloatingRateIndexBase:

type InflationRateCalculationSequence:

	indexLag string (1..1) <"Inflation index intrinsic (primary) lag.">
	additionalLag string (0..1) <"Additional (secondary) lag.">

type InflationRedemptionAmountCalculation: <"Provides information to calculate the redemption amount.">

	floored CanonicalBoolean (1..1) <"Indicates whether the redemption amount is floored at the value of the outstanding notional. Where true, this signifies that the redemption amount is of the form:  Notional Amount x Max[0, ((IndexFinal/IndexInitial) -1)]">

type InterestRateStreamAnnex: <"InterestRateStream extended properties.">

	interestRateStreamStubModel InterestRateStreamStubModel (1..1)
	amortisation AmortisationParameters (0..1)

type PaymentCalculationPeriod: <"Extended PaymentCalculationPeriod definition.">

	paymentAmount number (0..1) <"Payment amount generated by the payment calculation period, in currency of the stream notional amount. This may be a pre-determined amount in the case of a fixed rate stream, or an amount calculated as the result of a fixing event, or series of fixing events, on a floating rate stream.">

type SpreadTenor:

	indexTenorModel IndexTenorModel (1..1)
	multiplier int (1..1)

type SwapStream: <"Extended InterestRateStream definition for swap.">

	annex SwapStreamAnnex (0..1) <"Swapstream extended properties.">
	bullionSettlement FxBullionSettlement (0..1)

type SwapStreamAnnex extends InterestRateStreamAnnex: <"SwapStream supplementary properties, to assist with interpretation of stream content.">

	compounding CanonicalBoolean (1..1) <"Compounding flag: where \'true\', multiple calculation periods contribute to each payment period, with interest compounded onto the notional.">
	zeroCoupon CanonicalBoolean (1..1) <"Zero coupon flag: where \'true\', periodic accrued interest amounts are compounded into a single interest payment at termination.">

type AmortisationParametersModel: <"Amortisation applies on the referenced swap stream.   This component is intended to substitute for FpML notionalStepParameters in cases where it is not possible to produce the full FpML parametric representation.  Unless otherwise indicated, amortisation commences from the first regular period start date (the effective date in the absence of an initial stub), and proceeds to the termination date. The opening notional amount is the initialValue of notionalStepSchedule for the stream.  When this component is present, the \'step\' values should be omitted from the related notionalStepSchedule (only initialValue is produced) and notionalStepParameters should be absent.">

	amortisationAmountModel AmortisationAmountModel (1..1)
	amortisationFrequencyModel AmortisationFrequencyModel (1..1)
	amortisationStartDateModel AmortisationStartDateModel (0..1)

type AmortisationAmountModel:

	notionalTerminationAmount string (0..1) <"The target notional amount for linear amortisation through to the termination date.  For example, in the case of linear amortisation to zero, notionalTerminationAmount=0.  Note, this is the \"notional\" value at the termination date - no interest payment is calculated on this amount.">
	constantStepAmount string (0..1) <"Constant notional step amount. The notional amount is decremented by this amount at the end of each amortisation period.  Treatment in the case where the decrement would result in a value less than zero is undefined.  Note, the notional decrement is expressed as a positive value, so a negative step amount would imply an accreting (increasing) schedule.">
	amortisationAmountModelSequence AmortisationAmountModelSequence (0..1)

	condition Choice:
		one-of

type AmortisationAmountModelSequence:

	mortgageRate number (1..1) <"Mortage rate for use with Constant K+I amortisation calculation.  The rate is specified as an absolute value(real number), so 2.5% is represented as 0.025.">
	dayCountFraction string (0..1) <"The day count basis for the amortisation calculation. Values are as FpML dayCountFraction.   Bond basis is represented as \"30/360\",  the \"Rounded\" basis is represented as \"30/360.Rounded\" (extension to FpML dayCountFractionScheme)">

type AmortisationFrequencyModel:

	stepFrequency string (0..1) <"Amortisation frequency, expressed as an interval. This must be an integer multiple of the calculation period frequency of the referenced stream.">
	amortisationFrequencyModelSequence AmortisationFrequencyModelSequence (0..1)

	condition Choice:
		one-of

type AmortisationFrequencyModelSequence:

	stepFrequencyRatio int(min: 1) (1..1) <"Amortisation frequency, expressed as the integer ratio of the amortisation step frequency to the base frequency for the referenced stream (calculationPeriodFrequency, unless otherwise specified by baseFrequencyReference).">
	baseFrequencyReference Reference (0..1) <"Reference to the base frequency for the amortisation stepFrequencyRatio ([calculationPeriod|payment]Frequency).  In absence of this element, the base frequency is assumed to be the calculationPeriodFrequency for the stream.">

type AmortisationStartDateModel:

	includeStub boolean (0..1) <"A flag to indicate whether an initial stub period participates in the amortisation schedule.   Where true, amortisation commences from the stub start date (the effective date), where false, amortisation commences from the stub end date (the first regular period start date).  This element should only be produced in the presence of an initial stub, and has no effect otherwise.">
	amortisationStartDateModelChoice AmortisationStartDateModelChoice (0..1)

	condition Choice:
		one-of

type AmortisationStartDateModelChoice:

	startDate date (0..1) <"The start date for amortisation. This date corresponds to an unadjusted period start date, and denotes the start of the initial amortising period.  The first notional step occurs at the end of this amortising period, as defined by the step frequency.  Note, this is not the same date as FpML firstNotionalStepDate, which falls at the end of the amortisation period commencing on startDate">
	startDateReference Reference (0..1) <"A reference to the start date for amortisation defined elsewhere in the document.">

	condition Choice:
		one-of

type InterestRateStreamStubModel: <"Flags relating to stub periods: initial|final stub period length + full first coupon (where appropriate).  * Elements are optional to permit omission in the case where no stub exists.">

	interestRateStreamStubModelSequence InterestRateStreamStubModelSequence (0..1)
	finalStub StubPeriodLengthEnum (0..1) <"Where a final (end) stub exists, the stub period length relative to the regular period (Short|Long).">

type InterestRateStreamStubModelSequence:

	initialStub StubPeriodLengthEnum (1..1) <"Where an initial (start) stub exists, the stub period length relative to the regular period (Short|Long).">
	fullFirstCoupon CanonicalBoolean (0..1) <"Full fiirst coupon flag: where true in combination with a Short initial stub, indicates that the stub period accrues as for a full (i.e. regular) period.  * This element is only meaningful in the presence of a Short initial stub, and should be omitted otherwise.  * FpML equivalent notation is to set firstPeriodStartDate equal to the effective date which would apply in the case of a full first period (i.e. firstRegularPeriodStartDate - calculationPeriodFrequency)">

type ExchangeTradedOptionCore:

	exchangeTradedOptionCoreSequence ExchangeTradedOptionCoreSequence (0..1)
	optionType string (0..1) <"Specifies whether the option allows the hodler to buy or sell tne underlying asset.">

type ExchangeTradedOptionCoreSequence:

	strike number (0..1) <"Specifies the price at which the option can be exercised.">
	strikeCurrency string (0..1) <"The currency in which the strike of the ETO is expressed.">

type FloatingRateBase:

	floatingRateIndex string (1..1)

type FloatingRateSimple: <"Type for use in defining floating rate characterisitcs for LoanDeposit.model: equivalent to FpML FloatingRate, omitting optional elements following spreadSchedule.">

	floatingRateMultiplierSchedule string (0..1) <"A rate multiplier or multiplier schedule to apply to the floating rate. A multiplier schedule is expressed as explicit multipliers and dates. In the case of a schedule, the step dates may be subject to adjustment in accordance with any adjustments specified in the calculationPeriodDatesAdjustments. The multiplier can be a positive or negative decimal. This element should only be included if the multiplier is not equal to 1 (one) for the term of the stream.">
	spreadSchedule string (0..*) <"The ISDA Spread or a Spread schedule expressed as explicit spreads and dates. In the case of a schedule, the step dates may be subject to adjustment in accordance with any adjustments specified in calculationPeriodDatesAdjustments. The spread is a per annum rate, expressed as a decimal. For purposes of determining a calculation period amount, if positive the spread will be added to the floating rate and if negative the spread will be subtracted from the floating rate. A positive 10 basis point (0.1%) spread would be represented as 0.001.">

type FutureCore:

	multiplier int(min: 1) (0..1) <"The multiplier is the minimum number of the underlying - index or stock - that a participant has to trade while taking a position in the Future contract. The purpose of the multiplier is to inflate the value of the contract to add leverage to the trade. The multiplier for the Dow is 10, for the Nasdaq it is 100 and it is 250 for the Standard and Poor\'s index.">
	futureContractReference string (0..1) <"Specifies the future contract that can be referenced, besides the equity or index reference defined as part of the UnderlyerAsset type.">
	maturity date (0..1) <"The date when the future contract expires.">
	contractYearMonth int (0..1) <"The contract month of the futures contract. i.e. F13 WTI NYMEX Contract is 2013-01.">
	underlyer string (0..1) <"Underlyer of the option e.g. a listed future.">

	condition Choice:
		optional choice maturity, contractYearMonth

type FxRateSimple:

	quotedCurrencyPair QuotedCurrencyPairSimple (1..1) <"Defines the two currencies for an FX trade and the quotation relationship between the two currencies.">
	rate number (1..1) <"The rate of exchange between the two currencies of the leg of a deal. Must be specified with a quote basis.">

type IssuerTradeIdentifier: <"\"Issuer\" style trade identifier structure (issuerId, tradeId), used to represent USI, UTI">

	issuer string (1..1)
	tradeId string (1..1)

type LegalEntityAsset: <"Type extending FpML Asset with LegalEntity content">

	legalEntityAssetSequence LegalEntityAssetSequence (0..1)
	entityId string (0..*) <"A legal entity identifier (e.g. RED entity code)..">

	condition Choice:
		one-of

type LegalEntityAssetSequence:

	entityName string (1..1) <"The name of the reference entity. A free format string. FpML does not define usage rules for this element.">
	entityId string (0..*) <"A legal entity identifier (e.g. RED entity code).">

type LoanDepositCalculation: <"A type definining the parameters used in the calculation of fixed or floating calculation period amounts.">

	notionalSchedule string (1..1) <"The notional amount or notional amount schedule.">
	fixedRateSchedule string (1..1) <"The fixed rate or fixed rate schedule expressed as explicit fixed rates and dates. In the case of a schedule, the step dates may be subject to adjustment in accordance with any adjustments specified in calculationPeriodDatesAdjustments.">
	dayCountFraction string (1..1) <"The day count fraction.">
	discounting string (0..1) <"The parameters specifying any discounting conventions that may apply. This element must only be included if discounting applies.">
	compoundingMethod string (0..1) <"If more that one calculation period contributes to a single payment amount this element specifies whether compounding is applicable, and if so, what compounding method is to be used. This element must only be included when more that one calculation period contributes to a single payment amount.">

type LoanDepositCalculationPeriod extends LoanDepositPeriodBase: <"A type defining the parameters used in the calculation of a fixed or floating rate calculation period amount. This type forms part of cashflows representation of a swap stream.">

	floatingRateDefinition LoanDepositFloatingRateDefinition (0..1) <"The floating rate reset information for the calculation period.">
	fixedRate number (0..1) <"The calculation period fixed rate. A per annum rate, expressed as a decimal. A fixed rate of 5% would be represented as 0.05.">

	condition Choice:
		one-of

type LoanDepositCalculationPeriodAmount: <"A type defining the parameters used in the calculation of fixed or floating rate calculation period amounts or for specifying a known calculation period amount or known amount schedule.  * Sequence of (calculation) replaces choice of (calculation | knownAmountSchedule) per FpML CalculationPeriodAmount.">

	calculation LoanDepositCalculation (1..1) <"The parameters used in the calculation of fixed or floaring rate calculation period amounts.  * Sequence of (notionalSchedule) replaces choice of (notionalSchedule | fxLinkedNotional- Schedule) per FpML CalculationPeriodAmount.">

type LoanDepositFixingPeriod extends LoanDepositPeriodBase: <"A type defining the parameters used in the calculation of a fixed or floating rate calculation period amount. This type forms part of cashflows representation of a swap stream.">

	floatingRateDefinition LoanDepositFloatingRateDefinition (1..1) <"The floating rate reset information for the calculation period.">

type LoanDepositFloatingRate extends FloatingRateSimple: <"Type for use in defining floating rate characterisitcs for LoanDeposit.model: equivalent to FpML FloatingRate, omitting optional elements following spreadSchedule.">

type LoanDepositFloatingRateDefinition: <"A type defining parameters associated with a floating rate reset. This type forms part of the cashflows representation of a stream.  * This type is constructed as a restriction on, and is schema-compatible with, FpML FloatingRateDefintion">

	calculatedRate number (0..1) <"The final calculated rate for a calculation period after any required averaging of rates A calculated rate of 5% would be represented as 0.05.">
	rateObservation string (0..1) <"The details of a particular rate observation, including the fixing date and observed rate. A list of rate observation elements may be ordered in the document by ascending adjusted fixing date. An FpML document containing an unordered list of rate observations is still regarded as a conformant document.  * this element has optional, unbounded occurrence under FpML FloatingRateDefinition">
	floatingRateMultiplier number (0..1) <"A rate multiplier to apply to the floating rate. The multiplier can be a positive or negative decimal. This element should only be included if the multiplier is not equal to 1 (one).">
	spread number (0..1) <"The ISDA Spread, if any, which applies for the calculation period. The spread is a per annum rate, expressed as a decimal. For purposes of determining a calculation period amount, if positive the spread will be added to the floating rate and if negative the spread will be subtracted from the floating rate. A positive 10 basis point (0.1%) spread would be represented as 0.001.">

type LoanDepositFrequency: <"A type defining a time frequency, e.g. one day, three months. Used for specifying payment or calculation frequencies at which the value T (Term) is applicable.  * Copied from FpML Frequency (fpml-shared-5), conserving optionality of content under recordkeeping view (otherwise redefined in FiML to enforce content, consistent with FpML Period definition).">

	periodMultiplier int(min: 1) (0..1) <"A time period multiplier, e.g. 1, 2 or 3 etc. If the period value is T (Term) then periodMultiplier must contain the value 1.">
	period string (0..1) <"A time period, e.g. a day, week, month, year or term of the stream.">
	id string (0..1)

type LoanDepositPeriodBase: <"Abstract base type for types defining the parameters used in the calculation of a fixed or floating rate calculation period amount. This type forms part of cashflows representation of a swap stream.">

	loanDepositPeriodBaseSequence0 LoanDepositPeriodBaseSequence0 (0..1)
	loanDepositPeriodBaseSequence1 LoanDepositPeriodBaseSequence1 (0..1)
	calculationPeriodNumberOfDays int(min: 1) (0..1) <"The number of days from the adjusted effective / start date to the adjusted termination / end date calculated in accordance with the applicable day count fraction.">
	notionalAmount number (1..1) <"The amount that a cashflow will accrue interest on.">
	id string (0..1)

	condition Choice:
		required choice loanDepositPeriodBaseSequence0, loanDepositPeriodBaseSequence1

type LoanDepositPeriodBaseSequence0:

	unadjustedStartDate date (1..1) <"The calculation period start date, adjusted according to any relevant business day convention.">
	unadjustedEndDate date (1..1) <"The calculation period end date, adjusted according to any relevant business day convention.">
	loanDepositPeriodBaseSequenceSequence LoanDepositPeriodBaseSequenceSequence (0..1)

type LoanDepositPeriodBaseSequenceSequence:

	adjustedStartDate date (1..1) <"The calculation period start date, adjusted according to any relevant business day convention.">
	adjustedEndDate date (1..1) <"The calculation period end date, adjusted according to any relevant business day convention.">

type LoanDepositPeriodBaseSequence1:

	adjustedStartDate date (1..1) <"The calculation period start date, adjusted according to any relevant business day convention.">
	adjustedEndDate date (1..1) <"The calculation period end date, adjusted according to any relevant business day convention.">

type LoanDepositPrincipalExchange: <"A type defining a principal exchange amount and adjusted exchange date. The type forms part of the cashflow representation of a swap stream.">

	unadjustedPrincipalExchangeDate date (0..1)
	adjustedPrincipalExchangeDate date (1..1) <"The principal exchange date. This date should already be adjusted for any applicable business day convention.">
	principalExchangeAmount number (0..1) <"The principal exchange amount. This amount should be positive if the stream payer is paying the exchange amount and signed negative if they are receiving it.">
	id string (0..1)

type QuotedCurrencyPairSimple: <"Defines the two currencies for an FX trade and (optionally) the quotation relationship between the two currencies.  This type is designed to support">

	currency1 string (1..1) <"The first currency specified when a pair of currencies is to be evaluated.">
	currency2 string (1..1) <"The second currency specified when a pair of currencies is to be evaluated.">
	quoteBasis string (0..1) <"The method by which the exchange rate is quoted.  * This element is mandatory under FpML QuotedCurrencyPair, optional here.">

type ReportableLegalEntity: <"A type defining a legal entity.">

	reportableLegalEntitySequence ReportableLegalEntitySequence (0..1)
	entityId string (0..*) <"A legal entity identifier (e.g. RED entity code)..">
	id string (0..1)

	condition Choice:
		required choice reportableLegalEntitySequence, entityId

type ReportableLegalEntitySequence:

	entityName string (1..1) <"The name of the reference entity. A free format string. FpML does not define usage rules for this element.">
	entityId string (0..*) <"A legal entity identifier (e.g. RED entity code).">

type ReportableMasterAgreementBase: <"An entity for defining the agreement executed between the parties and intended to govern all OTC derivatives transactions between those parties. * Structurally compatible with fpml:MasterAgreement, but with mandatory content">

	masterAgreementType string (1..1) <"The agreement executed between the parties and intended to govern product-specific derivatives transactions between those parties.">
	masterAgreementVersion string (0..1) <"The version of the master agreement.">
	masterAgreementDate date (1..1) <"The date on which the master agreement was signed.">

type ReportingPartyTradeIdentifier: <"Structurally compatible with fpml:PartyTradeIdentifier, but omitting linkId, allocationTradeId (not used in regulatory reporting context).">

	blockTradeId string (0..1) <"The trade id of the block trade. This is used by each one of the allocated trades to reference the block trade. This element can also represent the trade id of the parent trade for N-level allocations. In the case, this element is only used to model N-level allocations in which the trade acts as block and allocated trade at the same time. This basically means the ability to allocate a block trade to multiple allocation trades, and then allocate these in turn to other allocation trades (and so on if desired).">
	originatingTradeId string (0..*) <"The trade id of the trade(s) upon which this was based, for example the ID of the trade that was submitted for clearing if this is a cleared trade, or of the original trade if this was novated or cancelled and rebooked, or the list of trades that were netted or compressed together in the case of a compression event. The originatingEvent will explain why the trade was created; the existence and number of originatingTradeId elements should correspond to the originatingEvent, and they should be interpreted using that field.">

type BuyerSellerStrictModel: <"BuyerSeller model with mandatory PartyReferences (adopted from FpML-5-8+)">

	buyerPartyReference string (1..1) <"A reference to the party that buys this instrument, ie. pays for this instrument and receives the rights defined by it. See 2000 ISDA definitions Article 11.1 (b). In the case of FRAs this the fixed rate payer.">
	buyerAccountReference string (0..1) <"A reference to the account that buys this instrument.">
	sellerPartyReference string (1..1) <"A reference to the party that sells (\"writes\") this instrument, i.e. that grants the rights defined by this instrument and in return receives a payment for it. See 2000 ISDA definitions Article 11.1 (a). In the case of FRAs this is the floating rate payer.">
	sellerAccountReference string (0..1) <"A reference to the account that sells this instrument.">

type CommodityExerciseModel: <"Support inclusion of exercise as native FpML content in FiML CommodityOption (derived type)">

	exercise string (1..1) <"The parameters for defining how the commodity option can be exercised and how it is settled.">

type CommodityFloatingLegCalculationModel: <"Support inclusion of floating leg calculation as native FpML content in FiML CommodityFloatingPriceLeg (derived type)">

	calculation string (1..1) <"Defines details relevant to the calculation of the floating price.">

type CommodityProductDeliveryModel: <"Support inclusion of delivery related content (+ multiplier) as native FpML content in FiML Commodity (derived type)">

	commodityProductDeliveryModelSequence CommodityProductDeliveryModelSequence (0..1)
	multiplier string (0..1) <"The \'multiplier\' specifies the multiplier associated with the Transaction. The \'multiplier\' element has two uses: (1) for Freight Transactions or any Calculation Period specified for a Freight Transaction, if an amount is specified as the Multiplier then it is captured by this element and (2) if the Transaction is a heat rate option, the heat rate multiplier is represented in this element. If multiplier is not provided, multiplier is assumed to be 1. (i.e. rate source states 1 BBL of Oil as 90 Dollars. Multiplier of 10 will change the value to 900 dollars.)">

type CommodityProductDeliveryModelSequence:

	commodityProductDeliveryModelSequenceChoice CommodityProductDeliveryModelSequenceChoice (0..1)
	deliveryDate string (0..1) <"The Delivery Date is a fixed, single day.">
	deliveryDateYearMonth int (0..1) <"The Delivery Date is a fixed, single month.">
	deliveryDateRollConvention string (0..1) <"The \'deliveryDateRollConvention\' specifies, for a Commodity Transaction that references a listed future via the \'deliveryDates\' element, the day on which the specified future will roll to the next nearby month prior to the expiration of the referenced future. If the future will not roll at all - i.e. the price will be taken from the expiring contract, 0 should be specified here. If the future will roll to the next nearby on the last trading day - i.e. the price will be taken from the next nearby on the last trading day, then 1 should be specified and so on.">
	deliveryDateExpirationConvention string (0..1) <"The \'deliveryDateExpirationConvention\' specifies, for a Commodity Transaction that references a listed future via the \'deliveryDates\' element, the day on which the specified future will expire ahead of the actual expiration of the referenced future. For example: Z21 Contract expires on 19Nov21, with an adjust of 2D the \"expire\" will be 16Nov21. DeliveryDateRollConvention takes precedence. Example: Pricing on the Z21 Contract with NearbyContractDay and a deliveryDateRoll of 10D, Sampling of the F22 Contract will occur on 8Nov21 through the last Date of the Z21 Contract. With an ExpConvention of 5D, the last sampling date on the F22 contract will be 12Nov21.">

	condition Choice:
		required choice commodityProductDeliveryModelSequenceChoice, deliveryDate , deliveryDateYearMonth

type CommodityProductDeliveryModelSequenceChoice:

	deliveryDates string (0..1) <"Deprecated: The \'deliveryDates\' element is applicable for a Commodity Reference Price that references a listed future contract (e.g. The Delivery Date is a NearbyMonth).">
	deliveryNearby string (0..1) <"A container for the parametric representation of nearby contracts.">

	condition Choice:
		one-of

type FloatingRateParametersModel:

	calculationParameters string (0..1) <"Parameters to specify a rate calculated using an averaging or compounding formula, as described in the 2021 ISDA Defintions, section 7. Please note that when this structure is used, the \"resetDates\" structure will not be used. Instead, the observation rules for the calculated rate are defined within the structure.">
	fallbackRate string (0..1) <"A fallback rate calculated using an averaging or compounding formula to be used in case of the cessation of the original term rate. This structure is provided to 1) allow a message sender to report that a fallback is effect, and/or 2) allow an approximate representation to be created for published fallback rates to allow operations such as valuation, accrual calculation, and risk calculation.">

type FloatingRateIndexElement: <"Group to support referencing of FpML floatingRateIndex element in alternative rate calculation models">

	floatingRateIndex string (1..1)

type IndexTenorModel: <"Group to support referencing of FpML indexTenor element in alternative rate calculation models">

	indexTenor string (1..1)

type ReportingProductModel: <"FpML Product.model with optional primaryAssetClass (for use in content of ReportingProductInformation).">

	primaryAssetClass string (0..1) <"A classification of the most important risk class of the trade. FpML defines a simple asset class categorization using a coding scheme.">
	secondaryAssetClass string (0..*) <"A classification of additional risk classes of the trade, if any. FpML defines a simple asset class categorization using a coding scheme.">
	reportingProductModelSequence ReportingProductModelSequence (0..1)
	productId string (0..*) <"A product reference identifier. The product ID is an identifier that describes the key economic characteristics of the trade type, with the exception of concepts such as size (notional, quantity, number of units) and price (fixed rate, strike, etc.) that are negotiated for each transaction. It can be used to hold identifiers such as the \"UPI\" (universal product identifier) required by certain regulatory reporting rules. It can also be used to hold identifiers of benchmark products or product temnplates used by certain trading systems or facilities. FpML does not define the domain values associated with this element. Note that the domain values for this element are not strictly an enumerated list.">
	embeddedOptionType string (0..2) <"Describes the type of any embedded optionality in the transaction that might not otherwise be apparent. Can be used to represent embedded optionality such as early termination provisions, extendible provisions, or cancelable provisions, etc., where applicable. If omitted, no embedded optionality is applicable.">

	condition Choice:
		required choice reportingProductModelSequence, productId

type ReportingProductModelSequence:

	productType string (1..*) <"A classification of the type of product. FpML defines a simple product categorization using a coding scheme.">
	productId string (0..*) <"A product reference identifier. The product ID is an identifier that describes the key economic characteristics of the trade type, with the exception of concepts such as size (notional, quantity, number of units) and price (fixed rate, strike, etc.) that are negotiated for each transaction. It can be used to hold identifiers such as the \"UPI\" (universal product identifier) required by certain regulatory reporting rules. It can also be used to hold identifiers of benchmark products or product temnplates used by certain trading systems or facilities. FpML does not define the domain values associated with this element. Note that the domain values for this element are not strictly an enumerated list.">

type SecLendCallNoticeModel:

	callingParty string (1..1) <"The party to the open security lending transaction that has a right to demand exercise of the far leg of the open security lending transaction. This element represents an enumerated list that includes: Borrower, Lender, Either and AsDefinedInMasterAgreement. In the default case, either party can call for closing an open security lending transaction. If electing parties are defined in the Master Agreement and not in the open security lending confirmation, the value AsDefinedInMasterAgreement should be used. Exact borrower/lender related parties, including any third parties who can demand exercise of open security lending transactions on behalf of the parties to the trade (calculation agent, executing broker, etc.), can be defined in the relatedParty element (tradeHeader/partyTradeInformation).">
	callDate string (0..1) <"Defines the latest date when the open security lending transaction can and must be exercised on demand by a party to the trade indicated in the electingParty element (or in the Master Agreement, if the electingParty element has AsDefinedInMasterAgreement value). For instance, in an open security lending transaction with the callDate agreed as business day one year after the trade date, the far leg can be settled on any day after the near leg settlement date and before and including the callDate. If the call date is not defined in trade terms and / or not included into the trade confirmation this element can be omitted.">
	noticePeriod string (0..1) <"Notice period for open security lending transactions in number of days. This element represents the agreed period of notice to be given in advance before exercise of the security lending trade by a party requesting such exercise.">
	partyNoticePeriod string (0..2) <"Notice period for open security lending transactions referenced to a party to the trade, in number of days. This element represents the agreed period of notice to be given in advance before exercise of the security lending trade by a party requesting such exercise and the reference to that party.">

	condition Choice:
		optional choice noticePeriod, partyNoticePeriod

type SecLendDurationModel:

	duration SecLendDurationEnum (1..1) <"Duration of the security lending transaction. {e.g. Open, Term}.">
	secLendCallNoticeModel SecLendCallNoticeModel (0..1)

type SecLendFeeRebateModel:

	secLendFeeRebateModelSequence SecLendFeeRebateModelSequence (0..1)
	rebate string (0..1) <"Under a cash collateralized transaction: a portion of re-investment interest paid to the security borrower (rebate).">
	dayCountFraction string (1..1) <"The day count fraction for calculating a fee or a rebate on an SBL transaction.">

	condition Choice:
		required choice secLendFeeRebateModelSequence, rebate

type SecLendFeeRebateModelSequence:

	fee string (1..1) <"Under a non-cash collateralized transaction, the borrower pays a fee on the security being lent.">
	rebate string (0..1)

type SecLendPrincipalModel:

	principal string (1..1) <"The security (principal) which is the subject of the lending transaction.">
	initiation string (1..1) <"Initiation of the security lending transaction: initial transfer of principal.">
	termination string (0..1) <"Termination of the security lending transaction: return of principal.">

type SecLendProvisionsModel:

	collateralProvisions string (1..1) <"Collateral provisions component derives collateral information from the Master Agreement documentation.">

type MessageModel:

	regulatoryReportingMessageModel RegulatoryReportingMessageModel (0..1)
	messageRejected MessageRejected (0..1)

	condition Choice:
		one-of

type GenericCommodityExtensionsModel: <"Commodity specifc extensions (commodity schedule)">

	schedule CommodityScheduleFloating (0..2) <"Commodity floating payment/fixing schedule. In the case where multiple schedules exist (up to two), each schedule should reference the commodity swap leg to which it relates by means of the legReference element.  * A single schedule without legReference is construed as applying to the parent commoditySwap as a whole.">

type AdjustableOffset: <"An adjustable offset can be used to specify a number of days, business or calendar, for example in a notice period.">

type AtomicSettlementTransfer: <"Abstract base class for all transfer of cash or securities">

	suppress boolean (0..1) <"Indicate if this transfer should be suppressed. Absence of this flag means that the transfer should not be suppressed.">
	id string (0..1)

type Attribution: <"An attribution must specify its type, and an amount. Any of the three amount fields below can be used (and they can all be used at the same time), as long as they are used consistently. You can express an attribution in a maximum of three different currencies (settlement, base, underlying), which are usually the same as the settlement currency on the trade, the base currency used for accounting purposes, and the underlying currency which refers to the currency of an underlying instrument used in a transaction. Note however that these are just guidelines; you can actually specify attributions in any currency that you like, as long as you are consistent. Within an Attributions structure, all attribution/settlementAmounts are expressed in the same currency, defined by the settlementCurrency field (see enclosing Attributions structure). Same holds true for base and underlying amounts.">

	_type AttributionType (1..1) <"The attribution type. The cash settlement amount specified in the enclosing transfer will be broken down into several subcomponents (like a PandL explain), and the type of the breakdown is defined here. Typical values are in a scheme.">
	settlementAmount number (0..1) <"An amount expressed in the settlement currency that was indicated in the enclosing Attributions structure. This is done to avoid repeating the currency for every amount when we know that attributions are expressed in a consistent way, with the same currencies.">
	baseAmount number (0..1) <"An amount expressed in the base currency defined in the enclosing Attributions structure (see baseCurrency). If this optional field is present, baseCurrency must be defined in the enclosing structure.">
	underlyingAmount number (0..1) <"An amount expressed in the currency of an underlyer ( see underlyingCurrency). If this field is present then the underlyingCurrency field in the enclosing structure must be defined.">

type Attributions: <"A set of attributions, which are a way to break down a cash amount into several components, like the repo interest portion in the final cahflow of the repo, the clean price attribution, etc. An example could be, for a repo worth 1M on a security priced at 100 at maturity with a total interest of 10,000, 1M is attributed to the security \'dirty price\', 95,400,000.00 is attributed to the security clean price, ( I am making it up here ); 10,000.00 is attributed to the repo interest, and 200 is attributed to a stamp tax. All attributions are monetary amounts.">

	settlementCurrency string (1..1) <"The currency that is used for all the attributions expressed with settlementAmount. The reason for this is to avoid repeating the currency (for example using FpML:Money) for every attribution amount in the structure. We therefore assume that attributions are expressed in a maximum of three currencies, which we specify here. The settlementCurrency is assumed to be the settlement currency of the trade in general cases.">
	baseCurrency string (1..1) <"The currency that is used for all the attributions expressed with baseAmount. The baseCurrency is usually USD within the firm, but it is in fact driven by the accounting engine expectations.">
	underlyingCurrency string (0..1) <"The currency that is used for all the attributions expressed with underlyingAmount. Underlying currency is the currency of issuance for the underlying instrument. So if you need to express attributions on a Repo settling in EUR but with GBP instruments, you would specify underlyingCurrency to be GBP.">
	attribution Attribution (1..*) <"The attributions go here. There is no limit on the number of attributions.">

type AttributionType: <"An attribution type. Values are defined in a coding scheme. Typical values are RepoInterest, StampTax, WithholdingTax.">

	value string (1..1)
	attributionTypeScheme string(pattern: "\\w+:(\\/?\\/?)[^\\s]+") (0..1)

type CashRepricingEvent extends MidLifeEvent: <"A cash repricing event. This type of event is an adjustment of the price of the underlying collateral done to reflect current market conditions. The par amount is preserved constant, which means that the collateral quantity is unchanged. It is the settlement amount that changes after a cash repricing, so a cash repricing will trigger a cash movement.">

	collateral CollateralValuation (0..1) <"???? description should briefly summarize the meaning/purpose of the element, not just the rules for using it. - In general the collateral element must be used, it may only be omitted in cases where the source system is unable to provide collateral detail.">
	combinedInterestPayout boolean (1..1) <"This value should be set to true if we need to pay the accrued interest at the same time. If false, there is no payment attributed to the repo accrued interest, only cash movement linked to collateral re-valuation.">
	transfer Transfer (0..1) <"??? description should briefly summarize the meaning/purpose of the element">

type CashTransfer extends AtomicSettlementTransfer: <"By definition, to specify a cash transfer, we need to say how much we want to transfer, who is the payer ( correspondent ) and who is the receiver ( beneficiary ). Those terms are used in the settlement instruction and allow us to define the direction of the movement.">

	transferAmount string (1..1) <"The money to transfer.">
	attributions Attributions (0..1) <"For accounting, reporting or regulatory reasons, the transfer may have to be explained in a series of individual amounts. It may be possible for example to break down a transfer amount into constituents (gross, tax, net) or into individual amounts (interest, penalty) that would be netted at the transfer level. The attributions structure allows participants to explain their transfer amounts for better traceability. This is strictly optional.">

type CollateralSubstitutionEvent extends MidLifeEvent: <"A collateral substitution is an event where two parties, having previously entered into a repurchase agreement, or securities lending, agree that collateral used for the transaction be substituted with equivalent collateral. The new collateral must be deemed acceptable, in grade and quality and have an equivalent valuation compared substituted collateral at the time of the substitution.">

	previousCollateral CollateralValuation (1..1) <"The collateral previously pledged in the transaction, properly valued as of the date of substitution.">
	newCollateral CollateralValuation (1..1) <"The new collateral to use in the transaction, valued as of the date of substitution.">
	settlementTransfer SettlementTransfer (0..1) <"The settlement transfer structure may be used by participants that want to explicitly restate who will deliver what, when and how.">

type CollateralValuation: <"This type is used in Repo trades, to specify the valuation of a specific piece of collateral in the transaction. Note that the structure must be used within a structure that has a date attached to it, because the valuations included (such as prices, accruals and inflation factors) are relative to a date. We do not want to add an href to a date because that would be too much complexity for nothing.">

	bondCollateralModel BondCollateralModel (0..1)
	unitContractModel UnitContractModel (0..1)
	assetReference string (1..1) <"A reference to explicitly identify which asset is being valued.">

	condition Choice:
		required choice bondCollateralModel, unitContractModel

type CouponReinvestment: <"Coupon reinvestment event: in a buy/sell-back transaction, payment of any coupon amount by the buyer to the seller is deferred until the repurchase date, when it is deducted from the repurchase price. In the interim, the buyer is obliged to reinvest the value of the payment in order to compensate the seller for the delay in reimbursement.">

	principalAmount PositiveDecimal (1..1) <"Aggregate reinvested coupon amount = sum(couponEvent/couponAmount)">
	accruedInterest number (1..1) <"Aggregate interest accrued on reinvested coupon amounts = sum(couponEvent/ reinvestmentAmount)">

type EventReference: <"Reference to a Trade Event.">

type InterestPayoutEvent extends MidLifeEvent:

	payment string (1..1) <"The amount to be paid. Note that we do not specify who is paying the amount. Implicitly, the party that pays the repo Interest at maturity is the only party that can do an interest payout.">
	transfer Transfer (0..1) <"When necessary, it is possible to make the interest payout fully explicit, with parties and settlement instructions. Note that the transfer date *may* differ from the eventDate specified by the event; for example the date the payment is made can be 1 or 2 days after the interest has been calculated. Note that for an interest payout the transfer can only contain a cashTransfer as there are no security movements for an interest payout.">

type InterLifeBreak extends MidLifeEvent: <"Break event in an interlife booking chain.">

	interLifeBreakSequence InterLifeBreakSequence (0..1)

type InterLifeBreakSequence:

	reason InterLifeBreakReasonEnum (1..1)

type InterLifeEvent extends MidLifeEvent: <"Event in an interlife chain of transaction bookings: open, close.">

	interLifeEventSequence InterLifeEventSequence (0..1)

type InterLifeEventSequence:

	reason InterLifeEventReasonEnum (1..1)

type Margin: <"Defines the margin, also called haircut in repo and securities lending terminology, that will be applied to a transaction. It is essentially a premium, expressed in percentage, to compensate collateral quality (or lack thereof) and liquidity.">

	marginType MarginTypeEnum (1..1) <"The type of asset (cash or securities) to apply to which margin applies. See GMRA 2011 paragraph 2(h) for \"Cash Margin\" and GMRA 2011 paragraph 2(cc) for \"Margin Securities\".">
	marginFactor number (0..1) <"An element defining an initial margin expressed as a ratio of the Market Value of the collateral to the Purchase Price. The margin is expressed as a multiplication factor to reflect the quality of the collateral  (default value is 1, signifying that no margin applies).  Also called margin ratio as per Section 2, paragraph (z) of the TBMA/ISMA Global Master Repurchase Agreement (equivalent to the marginRatio element under the FpML Repo model).">
	haircut string (0..1) <"An element defining a haircut expressed as the percentage difference between the Market Value of the collateral and the Purchase Price of the repo and calculated as 100 multiplied by a ratio of the difference between the Market Value of the collateral and the Purchase Price of the repo to the Market Value of the collateral. Haircut is alternative way to adjust the value of collateral sold in a repurchase agreement to initial margin ratio. Because an initial margin is a percentage of the Purchase Price, while a haircut is a percentage of the Market Value of collateral, the arithmetic of initial margins and haircuts is slightly different. For example, an initial margin of 102% is not equivalent to a haircut of 2%, but to 1.961% (ie 100/102%). See GMRA 2011 paragraph 2(aa).">
	assetReference string (0..1) <"A reference to the collateral asset to which the margin requirement applies. This element should be produced in the case where margin requirements are specified for multiple pieces of collateral, and may be omitted otherwise.">

	condition Choice:
		required choice marginFactor, haircut

type NetTradeIdentifier: <"Identification of a net trade and original trades.">

	originalTradeIdentifier TradeIdentifierList (2..*) <"Identification of original trades.">

type PartySettlementTransferInformation: <"Additional information about the settlement transfer. We will use this to carry information to drive internal processing.">

	partyReference string (1..1) <"Information contained in this structure is relative to the party being referred to.">
	processingInformation SettlementTransferProcessingInformation (1..1) <"Any party specific information that may be required to properly execute a transfer. This can be used as a type substitution point to insert party specific structures.">

type RateChangeEvent extends MidLifeEvent: <"A rate change is a mid life event where on a given date, the repo rate to apply is changed as a result of a bilateral agreement between the two parties. There is no cash or security movement associated with a rate change. The repo structure allows you to specify repo rates as a schedule, so this type is not strictly required within the repo. We need it for consistency and to allow a discrete event message to declare a rate change on a trade.">

	rate number (1..1) <"The new repo rate, in decimal format that will be applicable at the specified event date.">

type RateObservationEvent extends MidLifeEvent: <"A rate observation is used only when a Repo is done against an index (typically EONIA repos) and we want to record the observed rates during the lifetime of the trade. This is similar in structure to a rate change, but the application context is different. A rate observation has no cash or security movement attached, so there is no transfer structure here. Rate observations are required on floating rate repos to calculate the accrued repo interest.">

	rate number (0..1) <"The observed rate at the specified event date that will be used to calculate the accrued interest on an index repo contract.">

type RelativePrice: <"A type which represents Pricing relative to a Benchmark.">

	spread number (1..1) <"Basis Point spread over a Benchmark.">
	bondEquityModel BondEquityModel (1..*)

type RepoSequence0:

	floatingRateCalculation string (1..1) <"The float index and tenor, with a spread. Use for floating rate repos. Most floatings in Europe are against EONIA.">
	resetFrequency string (0..1) <"The floating rate reset frequency.">

type RepoSequence1:

	feeRateSchedule string (1..1) <"Repo fee rate - the rate value can be negative, and can be changed by midlife events (feeRateChange).">
	feeDayCountFraction string (0..1) <"The day count fraction (calculation basis) applicable to the fee calculation. If this element is omitted, the dayCountFraction element is applicable to both the repo interest and fee amount calculations.">

type RepoSequence2:

	duration RepoDurationEnum (1..1) <"Duration code for the contract {Open, Overnight*, Term} *not currently used">
	extensionPeriodModel ExtensionPeriodModel (1..1)
	callNoticeModel CallNoticeModel (1..1)

type RepoSequence3:

	noticePeriod AdjustableOffset (1..1) <"Notice period for open ended or long dated repos in number of days.">
	duration RepoDurationEnum (1..1) <"A duration code for the contract.">
	extensionPeriodModel ExtensionPeriodModel (1..1)

type RepoForwardTransactionLeg extends RepoTransactionLeg: <"A transaction leg for a repo is equivalent to a single cash transaction. It is augmented here to carry some values that are of interest for the repo. Also note that the BuyerSeller model in this transaction must be the exact opposite of the one found in the spot leg.">

	calculationPeriodDayCount int(min: 1) (0..1) <"Number of days between spot- and forward- leg settlement (value) dates, for the purpose of calculating interest/fee amounts.">
	repoInterest number (0..1) <"The cash interest amount generated intrinsically by the trade i.e. \"classic\" repo interest. This amount is calculated as the repo cash rate applied to the spot-leg cash settlement amount over the duration of the trade, as per the repo day count fraction (calculation basis).">
	couponReinvestment CouponReinvestment (0..1)
	feeAmount number (0..1) <"Fee amount, expressed in the settlement currency.">
	settledInterestAmount number (0..1) <"The total cash interest amount (repo interest + carried interest - total fee amount), settled as a component of the forward leg settlement amount. This value is zero where interest is carried to the following trade in an interlife chain.">
	carriedInterestAmount number (0..1) <"The total cash interest amount (repo interest + carried interest - total fee amount), carried to the following trade in an interlife chain.">
	interestCarried CanonicalBoolean (0..1) <"Specifies whether interest is carried to the following trade in an interlife chain (boolean).">

	condition Choice:
		required choice settledInterestAmount, carriedInterestAmount

type RepoLegId: <"A Repo Leg Identification.">

	value string (1..1)
	repoLegIdScheme string(pattern: "\\w+:(\\/?\\/?)[^\\s]+") (0..1)
	id string (0..1)

type RepoSpotTransactionLeg extends RepoTransactionLeg: <"A transaction leg for a repo is equivalent to a single cash transaction.">

	carriedRepoInterest number (0..1) <"Repo interest amount carried forward from the preceding trade in an interlife chain, expressed in the settlement currency.">
	carriedFeeAmount number (0..1) <"Fee amount carried forward from the preceding trade in an interlife chain, expressed in the settlement currency.">
	carriedInterestAmount number (0..1) <"Totla interest amount carried forward from the preceding trade in an interlife chain, expressed in the settlement currency.">

type RepoTransactionLeg: <"A transaction leg for a repo is equivalent to a single cash transaction.">

	id0 RepoLegId (0..*)
	buyerSellerStrictModel BuyerSellerStrictModel (1..1)
	settlementModel SettlementModel (1..1)
	settlementTransfer SettlementTransferSimple (0..1)
	collateral CollateralValuation (0..*) <"Collateral valuation is used to carry the quantity and price details that are required to ensure that a repo contract is executed at fair value, with the value of the collateral matching the cash amount of the repo. Collateral is declared as optional here, with multiple cardinalities, since we can do a repo \"Multi\", with multiple instruments specified, or a \"Cash Borrow/Loan\" and \"TriPartyRepo\" with no collateral. In general cases, however it should be specified.">
	id1 string (0..1)

type RepoTransactionLegReference: <"Reference to an Transaction Leg.">

type SecurityTransfer extends AtomicSettlementTransfer: <"The transfer of a security requires an identifier for the security, and a quantity.">

	quantity number (1..1) <"The quantity of asset being transfered">
	assetReference string (1..1) <"The asset being transfered.">
	delivererPartyReference string (1..1) <"Reference to the party delivering the asset.">
	receiverPartyReference string (1..1) <"Reference to the party receiving the asset.">
	daylightIndicator boolean (0..1) <"Standard settlement in Euroclear takes place in a batch on \"value date - 1\" (at 4 pm), to allow trades which are not included in this batch to be settled on value date, the daylight indicator can be used. The MT 540 instruction will contain an indicator which notifies Euroclear whether a transaction can be put forward for settlement intra-day. This is the \"Daylight Indicator\" and will be set on all transactions with Euroclear. However, to ensure they are included within intra-day settlement, the counterparty within Euroclear (ie, participant B) must also indicate intra-day settlement can take place.">

type SettlementInstructionReference: <"Settlement Instruction Reference.">

type SettlementTransfer: <"This is a container to carry \'transfers\', i.e. elementary transfers of cash or securities. Transfer instructions are coupled with settlement instructions that are referenced.">

	settlementTransferIdentifierModel SettlementTransferIdentifierModel (0..1)
	transferInformation PartySettlementTransferInformation (0..*) <"Transfer information which applies to all elementary transfers.">
	transfer Transfer (1..*) <"An elementary transfer. There can be as many transfers specified in this structure as required.">
	settlementInstruction string (0..*) <"Settlement instruction.">

type SettlementTransferId: <"Settlement Transfer identification.">

	value string (1..1)
	settlementTransferIdScheme string(pattern: "\\w+:(\\/?\\/?)[^\\s]+") (0..1)
	id string (0..1)

type SettlementTransferIdentifier: <"Settlement Transfer identification and classification.">

	settlementTransferIdentifierModel SettlementTransferIdentifierModel (1..1)
	id string (0..1)

type SettlementTransferProcessingInformation: <"Type representing settlement transfer processing information.">

	owner boolean (0..1) <"If present and true the publisher considers this party to be the owner of the transfer.">

type SettlementTransferType: <"A settlement transfer classification.">

	value string (1..1)
	settlementTransferTypeScheme string(pattern: "\\w+:(\\/?\\/?)[^\\s]+") (0..1)

type StreamId: <"Stream identification.">

	value string (1..1)
	streamId string(pattern: "\\w+:(\\/?\\/?)[^\\s]+") (0..1)

type StreamReference: <"Reference to an Stream.">

type TradeAndComponentIdentifier: <"Contains identification of a trade, and references to a trade component or event.">

	tradeComponentIdentifier TradeComponentIdentifier (1..1)

type TradeComponentIdentifier: <"Trade Component or Event identification or references.">

	tradeComponentIdentifierChoice0 TradeComponentIdentifierChoice0 (0..*)
	repoLegReference RepoTransactionLegReference (0..1) <"??? A brief description should be provided">
	tradeComponentIdentifierChoice1 TradeComponentIdentifierChoice1 (0..*)
	eventReference EventReference (0..1) <"??? A brief description should be provided">
	tradeComponentIdentifierChoice2 TradeComponentIdentifierChoice2 (0..*)
	streamReference StreamReference (0..1) <"??? A brief description should be provided">

	condition Choice:
		one-of

type TradeComponentIdentifierChoice0:

	repoLegId RepoLegId (0..1) <"??? A brief description should be provided">
	versionedRepoLegId VersionedRepoLegId (0..1) <"??? A brief description should be provided">

	condition Choice:
		one-of

type TradeComponentIdentifierChoice1:

	eventId string (0..1) <"??? A brief description should be provided">
	versionedEventId VersionedEventId (0..1) <"??? A brief description should be provided">

	condition Choice:
		one-of

type TradeComponentIdentifierChoice2:

	streamId StreamId (0..1) <"??? A brief description should be provided">
	versionedStreamId VersionedStreamId (0..1) <"??? A brief description should be provided">

	condition Choice:
		one-of

type TradeIdentifierList: <"A type containing multiple tradeIdentifier.">

	tradeIdentifier string (1..*) <"A trade identifier.">

type Transfer: <"A type used to represent a transfer of cash, or securities, or a simultaneous exchange of securities vs cash.">

	id0 TransferId (0..*) <"??? A brief description should be provided">
	versionedId VersionedTransferId (0..*) <"??? A brief description should be provided">
	tradeComponentOrIdentifierOrNetModel TradeComponentOrIdentifierOrNetModel (0..1)
	deliveryMethod DeliveryMethodEnum (1..1) <"Specify the delivery method. There is a business rule associated with this field: if deliveryMethod is DVP then you must specify a cashTransfer and a securityTransfer at the same time. It is incorrect to specify DVP and give only a cash transfer instruction.">
	transferDate string (1..1) <"The date at which the transfer should occur.">
	transferSequence TransferSequence (0..1)
	securityTransfer SecurityTransfer (0..1) <"A transfer of securities between two parties.">
	settlementInstructionReference SettlementInstructionReference (0..1) <"Settlement Instruction Reference.">
	id1 string (0..1)

	condition Choice0:
		optional choice id0, versionedId

	condition Choice1:
		required choice transferSequence, securityTransfer

type TransferSequence:

	cashTransfer CashTransfer (1..1) <"A transfer of a cash amount between two parties.">
	securityTransfer SecurityTransfer (0..1) <"A transfer of securities between two parties.">

type TransferId: <"A Transfer Identification.">

	value string (1..1)
	transferIdScheme string(pattern: "\\w+:(\\/?\\/?)[^\\s]+") (0..1)
	id string (0..1)

type TriPartyAgentId: <"Identifier for the tri-party agent.">

	value string (1..1)

type TriPartySetId: <"Identifier for tri-party netting set.">

	value string (1..1)

type TriPartyInformation: <"Properties relating to a tri-party repo">

	agentId TriPartyAgentId (1..1) <"Identifier for the tri-party agent (ideally, a CRDS code or LEI).">
	setId TriPartySetId (0..1) <"Internal identifier for tri-party netting set.">

type VersionedEventId: <"EventId with version control elements.">

	id string (1..1) <"??? A brief description should be provided">

type VersionedRepoLegId: <"Repo Leg Id with version control elements.">

	id RepoLegId (1..1) <"??? A brief description should be provided">

type VersionedSettlementTransferId: <"Settlement Transfer Id with version control elements.">

	id SettlementTransferId (1..1) <"??? A brief description should be provided">

type VersionedSettlementTransferType: <"SettlementTransfer Type with version control elements.">

	_type SettlementTransferType (1..1) <"??? A brief description should be provided">

type VersionedStreamId: <"StreamId with version control elements.">

	id StreamId (1..1) <"??? A brief description should be provided">

type VersionedTransferId: <"Transfer Id with version control elements.">

	id TransferId (1..1) <"??? A brief description should be provided">

type BondCollateralModel: <"A group which has Collateral elements.">

	bondNominalModel BondNominalModel (1..1)
	bondPriceAndYieldModel BondPriceAndYieldModel (0..1)
	bondValuationAmountModel BondValuationAmountModel (0..1)

type BondEquityModel: <"A model group that allows us to specify that a repo contract can reference bond or equity \t\t\tinstruments.">

type CallNoticeModel: <"Call/notice properties.">

	noticePeriod AdjustableOffset (0..1) <"Notice period for open ended or long dated repos in number of days.">
	earliestCallDate date (0..1) <"Earliest date that the transaction can be called back/terminated.">

type ExtensionPeriodModel: <"Extension provisions">

	extensionStyle ExtensionStyleEnum (0..1) <"Type of extension provision: {Evergreen (close by mutual agreement), Extendable (extend by mutual agreement)}">
	extensionPeriod AdjustableOffset (0..1) <"Extension period for evergreen/extendable repos, as number of days.">

type SettlementTransferIdentifierModel: <"Settlement transfer identifier elements.">

	id SettlementTransferId (0..*) <"??? A brief description should be provided">
	_type SettlementTransferType (0..*) <"??? A brief description should be provided">

type TradeComponentOrIdentifierOrNetModel: <"Trade or Trade Identifier.">

	tradeComponentIdentifier TradeComponentIdentifier (0..1) <"Identify the trade component which has caused this transfer to occur within a Trade Settlement.">
	tradeAndComponentIdentifier TradeAndComponentIdentifier (0..*) <"Identify the trade and component which has caused this transfer to occur within a Settlement Message.">
	netTradeIdentifier NetTradeIdentifier (0..1) <"Identify the net trade and original trades which have caused this transfer to occur within a Trade or Settlement Message.">

	condition Choice:
		one-of

type UnitContractModel: <"A group which has unit based trade elements.">

	numberOfUnits number (1..1) <"The number of units (index or securities).">
	unitPrice string (1..1) <"The price of each unit.">

type BoxSpread:

	currencyPair string (1..1)
	call OptionSpreadCall (1..1)
	put OptionSpreadPut (1..1)

type CertificateOfDeposit:

	instrumentId string (1..1)
	issuerName string (0..1)
	issuerPartyReference string (0..1)
	otherIssuerParty boolean (0..1)

	condition Choice:
		required choice issuerName, issuerPartyReference

type FloatingRateIndexFixingEvent extends EventBase:

	calculation LoanDepositFixingCalculationPeriod (0..1) <"Details of the interest calculation period(s) contributing to the payment event.  * The optional paymentAmount element may be omitted, as this value will be reflected in the payment element following.">
	calculationPeriodReference Reference (0..1) <"Reference to the calculation period subject to the notified fixing e.g. contained in the related trade/loanDeposit/cashflows schedule.">
	floatingRateIndexFixingEventSequence FloatingRateIndexFixingEventSequence (0..1)

	condition Choice:
		required choice calculation, calculationPeriodReference

type FloatingRateIndexFixingEventSequence:

	payment string (1..1) <"Explicit details of the cashflow resulting from the interest fixing, including settlement instructions.">
	withholdingTax Tax (0..1)

type InterestPaymentEvent extends EventBase:

	calculation LoanDepositPaymentCalculationPeriod (1..1) <"Details of the interest calculation period(s) contributing to the payment event.  * The optional paymentAmount element may be omitted, as this value will be reflected in the payment element following.">
	payment string (1..1) <"Explicit cashflow details relating to the interest payment.  * The optional adjustedPaymentDate element replicates the mandatory adjustedPaymentDate contained in the preceding interestCalculation, however it is recommended that this element is produced, so the payment can be processed as a self-contained component.">
	withholdingTax Tax (0..1)

type LoanDepositAnnex: <"Supplementary properties to assist with interpretation of product content.">

	compounding CanonicalBoolean (1..1) <"Compounding flag: where \'true\', multiple calculation periods contribute to each payment period, with interest compounded onto the notional.">
	zeroCoupon CanonicalBoolean (1..1) <"Zero coupon flag: where \'true\', periodic accrued interest amounts are compounded into a single interest payment at termination.">

type LoanDepositCalculationPeriod extends LoanDepositCalculationPeriod: <"A type defining the parameters used in the calculation of a fixed or floating rate calculation period amount. This type forms part of cashflows representation of a swap stream.">

	loanDepositCalculationPeriodSequence LoanDepositCalculationPeriodSequence (0..1)
	principalExchange LoanDepositPrincipalExchange (0..1)

type LoanDepositCalculationPeriodSequence:

	accruedInterestAmount number (1..1) <"The interest amount accrued for the calculation period.">
	loanDepositCalculationPeriodSequenceSequence LoanDepositCalculationPeriodSequenceSequence (0..1)

type LoanDepositCalculationPeriodSequenceSequence:

	withholdingTax Tax (1..1)
	netAmount string (0..1)

type LoanDepositCalculationPeriodDates: <"A type defining the parameters used to generate the calculation period dates schedule, including the specification of any initial or final stub calculation periods. A calculation perod schedule consists of an optional initial stub calculation period, one or more regular calculation periods and an optional final stub calculation period. In the absence of any initial or final stub calculation periods, the regular part of the calculation period schedule is assumed to be between the effective date and the termination date. No implicit stubs are allowed, i.e. stubs must be explicitly specified using an appropriate combination of firstPeriodStateDate, firstRegularPeriodStartDate and lastRegularPeriodEndDate. Relative effective and termination dates are ommitted.">

	effectiveDate string (1..1) <"The first day of the term of the trade. This day may be subject to adjustment in accordance with a business day convention.">
	terminationDate string (0..1) <"The last day of the term of the trade. This day may be subject to adjustment in accordance with a business day convention.">
	callNoticePeriod string (0..1)
	calculationPeriodFrequency string (0..1) <"The frequency at which calculation period end dates occur with the regular part of the calculation period schedule and their roll date convention.">
	id string (1..1)

	condition Choice:
		required choice terminationDate, callNoticePeriod

type LoanDepositCashflows: <"A type defining the cashflow representation of a swap trade.">

	principalExchange LoanDepositPrincipalExchange (0..*) <"The initial, intermediate and final principal exchange amounts. Typically required on cross currency interest rate swaps where actual exchanges of principal occur. A list of principal exchange elements may be ordered in the document by ascending adjusted principal exchange date. An FpML document containing an unordered principal exchange list is still regarded as a conformant document.  * This section should be omitted, if using the principalExchange extension content within paymentCalculation/calculationPeriod (following).  * Principal exchange amounts are denominated in the units of the principal. This may differ from the currency of the interest payment(s) e.g. in the case of a bullion loan /deposit.">
	paymentCalculationPeriod LoanDepositPaymentCalculationPeriod (0..*) <"The adjusted payment date and associated calculation period parameters required to calculate the actual or projected payment amount. A list of payment calculation period elements may be ordered in the document by ascending adjusted payment date. An FpML document containing an unordered list of payment calculation periods is still regarded as a conformant document.">

type LoanDepositCashSettlement:

	settlementRate string (1..1) <"Describes the rate at which the trade will be cash settled">
	settlementRateOption SettlementRateOption (0..1)
	taxLiability TaxLiabilityEnum (0..1) <"Indicates who has tax liability for the trade">

type LoanDepositFixingCalculationPeriod:

	unadjustedPaymentDate date (0..1)
	adjustedPaymentDate date (1..1) <"The adjusted payment date. This date should already be adjusted for any applicable business day convention. This component is not intended for use in trade confirmation but may be specified to allow the fee structure to also serve as a cashflow type component (all dates the Cashflows type are adjusted payment dates).">
	calculationPeriod LoanDepositFixingPeriod (1..1) <"The parameters used in the calculation of a fixed or floating rate calculation period amount. A list of calculation period elements may be ordered in the document by ascending start date. An FpML document which contains an unordered list of calculation periods is still regarded as a conformant document.">
	paymentAmount NonNegativeDecimal (0..1) <"The payment amount generated for the payment calculation period">

type LoanDepositFixingPeriod extends LoanDepositFixingPeriod: <"A type defining the parameters used in the calculation of a fixed or floating rate calculation period amount. This type forms part of cashflows representation of a swap stream.">

	loanDepositFixingPeriodSequence LoanDepositFixingPeriodSequence (0..1)
	principalExchange LoanDepositPrincipalExchange (0..1)

type LoanDepositFixingPeriodSequence:

	accruedInterestAmount NonNegativeDecimal (1..1) <"The interest amount accrued for the calculation period.">
	loanDepositFixingPeriodSequenceSequence LoanDepositFixingPeriodSequenceSequence (0..1)

type LoanDepositFixingPeriodSequenceSequence:

	withholdingTax Tax (1..1)
	netAmount string (0..1)

type LoanDepositFloatingRate extends FloatingRateSimple: <"A type defining a floating rate.">

type LoanDepositInflation:

	index string (1..1)
	initialIndexLevel number (0..1)

type LoanDepositOptionStrategy:

	box BoxSpread (1..1)

type LoanDepositPaymentCalculationPeriod: <"A type defining the adjusted payment date and associated calculation period parameters required to calculate the actual or projected payment amount. This type forms part of the cashflow representation of a swap stream.">

	unadjustedPaymentDate date (0..1)
	adjustedPaymentDate date (1..1) <"The adjusted payment date. This date should already be adjusted for any applicable business day convention. This component is not intended for use in trade confirmation but may be specified to allow the fee structure to also serve as a cashflow type component (all dates the Cashflows type are adjusted payment dates).">
	calculationPeriod LoanDepositCalculationPeriod (1..*) <"The parameters used in the calculation of a fixed or floating rate calculation period amount. A list of calculation period elements may be ordered in the document by ascending start date. An FpML document which contains an unordered list of calculation periods is still regarded as a conformant document.">
	paymentAmount number (0..1) <"The payment amount generated for the payment calculation period.  * This is a signed amount, as loan/deposit interest payments may flow counter to the natural direction of the interest rate stream (leg).">
	id string (0..1)

type LoanDepositPaymentDates: <"A type defining parameters used to generate the payment dates schedule, including the specification of early or delayed payments. Payment dates are determined relative to the calculation period dates or the reset dates.">

	paymentFrequency LoanDepositPaymentFrequency (1..1) <"The frequency at which regular payment dates occur. If the payment frequency is equal to the frequency defined in the calculation period dates component then one calculation period contributes to each payment amount. If the payment frequency is less frequent than the frequency defined in the calculation period dates component then more than one calculation period will contribute to the payment amount. A payment frequency more frequent than the calculation period frequency or one that is not a multiple of the calculation period frequency is invalid.">
	payRelativeTo string (0..1) <"Specifies whether the payments occur relative to each adjusted calculation period start date, adjusted calculation period end date or each reset date. The reset date is applicable in the case of certain euro (former French Franc) floating rate indices. Calculation period start date means relative to the start of the first calculation period contributing to a given payment. Similarly, calculation period end date means the end of the last calculation period contributing to a given payment.">
	paymentDaysOffset string (0..1) <"If early payment or delayed payment is required, specifies the number of days offset that the payment occurs relative to what would otherwise be the unadjusted payment date. The offset can be specified in terms of either calendar or business days. Even in the case of a calendar days offset, the resulting payment date, adjusted for the specified calendar days offset, will still be adjusted in accordance with the specified payment dates adjustments. This element should only be included if early or delayed payment is applicable, i.e. if the periodMultiplier element value is not equal to zero. An early payment would be indicated by a negative periodMultiplier element value and a delayed payment (or payment lag) would be indicated by a positive periodMultiplier element value.">
	paymentDatesAdjustments string (0..1)
	id string (0..1)

type LoanDepositPaymentFrequency extends LoanDepositFrequency: <"A type defining parameters used to generate the payment dates schedule, including the specification of early or delayed payments. Payment dates are determined relative to the calculation period dates or the reset dates.">

	paymentDay string (0..1)

type LoanDepositPrincipalExchange: <"A type defining a principal exchange amount and adjusted exchange date. The type forms part of the cashflow representation of a swap stream.">

	unadjustedPrincipalExchangeDate date (0..1)
	adjustedPrincipalExchangeDate date (1..1) <"The principal exchange date. This date should already be adjusted for any applicable business day convention.">
	principalExchangeAmount number (1..1) <"The principal exchange amount, in the currency units of the principal. This amount should be positive if the stream payer is paying the exchange amount and signed negative if they are receiving it.">
	id string (0..1)

type LoanDepositRateObservation: <"A type defining parameters associated with an individual observation or fixing. This type forms part of the cashflow representation of a stream.">

	resetDate date (0..1) <"The reset date.">
	adjustedFixingDate date (1..1) <"The adjusted fixing date, i.e. the actual date the rate is observed. The date should already be adjusted for any applicable business day convention.">
	observedRate number (1..1) <"The actual observed rate before any required rate treatment is applied, e.g. before converting a rate quoted on a discount basis to an equivalent yield. An observed rate of 5% would be represented as 0.05.">
	treatedRate number (0..1) <"The observed rate after any required rate treatment is applied. A treated rate of 5% would be represented as 0.05.">
	observationWeight int(min: 1) (0..1) <"The number of days weighting to be associated with the rate observation, i.e. the number of days such rate is in effect. This is applicable in the case of a weighted average method of calculation where more than one reset date is established for a single calculation period.">
	id string (0..1)

type LoanDepositResetDates: <"A type defining the parameters used to generate the reset dates schedule and associated fixing dates. The reset dates are determined relative to the calculation periods schedules dates.">

	resetRelativeTo string (0..1) <"Specifies whether the reset dates are determined with respect to each adjusted calculation period start date or adjusted calculation period end date. If the reset frequency is specified as daily this element must not be included.">
	fixingDates string (1..1) <"Specifies the fixing date relative to the reset date in terms of a business days offset and an associated set of financial business centers. Normally these offset calculation rules will be those specified in the ISDA definition for the relevant floating rate index (ISDA\'s Floating Rate Option). However, non-standard offset calculation rules may apply for a trade if mutually agreed by the principal parties to the transaction. The href attribute on the dateRelativeTo element should reference the id attribute on the resetDates element.">
	resetFrequency string (1..1) <"The frequency at which reset dates occur. [In the case of a weekly reset frequency, also specifies the day of the week that the reset occurs.] If the reset frequency is greater than the calculation period frequency then this implies that more than one reset date is established for each calculation period and some form of rate averaging is applicable.">
	resetDatesAdjustments string (0..1)
	id string (0..1)

type LoanDepositStream: <"A type defining the components specifiying an Loan Deposit stream, including both a parametric and cashflow representation for the stream of payments.">

	calculationPeriodDates LoanDepositCalculationPeriodDates (1..1) <"The calculation periods dates schedule, without relative dates.">
	paymentDates LoanDepositPaymentDates (1..1) <"The payment dates schedule.">
	resetDates LoanDepositResetDates (0..1) <"The reset dates schedule. The reset dates schedule only applies for a floating rate stream.">
	calculationPeriodAmount LoanDepositCalculationPeriodAmount (1..1) <"The calculation period amount parameters.">
	principalExchanges string (0..1) <"The true/false flags indicating whether initial, intermediate or final exchanges of principal should occur.">
	cashflows string (0..1) <"The cashflows representation of the swap stream.">

type OptionSpreadCall:

	premium string (1..1)
	strikeRate NonNegativeDecimal (1..1)
	capRate NonNegativeDecimal (0..1)

type OptionSpreadPut:

	premium string (1..1)
	strikeRate NonNegativeDecimal (1..1)
	floorRate NonNegativeDecimal (0..1)

type RolloverEvent extends EventBase:

	effectiveDate date (1..1) <"The effective date of the rollover event i.e. from which the new transaction arrangement takes effect.">
	carriedInterest number (0..1) <"Accrued interest amount, as at the rollover date. This amount is denominated in the currency of the loan/deposit principal.  Where the system internal representation of the rollover event results in creation of a new transaction, representing the \'rolled\' trade, this amount is carried over from the previous trade version.">
	calculation LoanDepositPaymentCalculationPeriod (0..1) <"Details of the revised interest calculation period resulting from the rollover event.">
	payment string (0..*) <"A collection of payments or fees associated with the rollover event.">

type SettlementRateOption: <"A type defining the settlement rate options through a scheme reflecting the terms of the Annex A to the 1998 FX and Currency Option Definitions.">

	value string (1..1)
	settlementRateOptionScheme string(pattern: "\\w+:(\\/?\\/?)[^\\s]+") (0..1)

type TerminationEvent extends EventBase:

	terminationDate date (1..1)
	payment string (0..*)

type ClientAndTreasuryRateSchedulesModel:

	clientRateMultiplierSchedule string (0..1) <"A rate multiplier or multiplier schedule to apply to the floating rate, to calculate the rate paid/recevied by the client.  Note: normally this is the rate multiplier or multiplier schedule produced as the FpML floatingRateMultiplierSchedule, i.e. the externally confirmable value(s).">
	treasuryRateMultiplierSchedule string (0..1) <"A rate multiplier or multiplier schedule to apply to the floating rate, to calculate the  funding rate obtained internally.  *** Internal use only *** This element must not be produced in any externally visible context">

type LoanDepositModel:

	initialPayerReference string (1..1) <"A pointer style reference to a party identifier defined elsewhere in the document. The referenced party is the payer of the initial principal on the start date i.e. the lender.">
	initialReceiverReference string (1..1) <"A pointer style reference to a party identifier defined elsewhere in the document. The referenced party is the receiver of the initial principal on the start date i.e. the borrower.">
	startDate date (1..1) <"The start date of the contract: the date on which the initial exchange of principal occurs, and from which interest calculation commences. This date should already be adjusted for any applicable business day convention.">
	noticePeriod string (0..1) <"In the case of a variable term transaction without a stated final maturity date, the contractual notice period for termination of the transaction.  * a \"call\" transaction permits the counterparty to terminate with no notification period - in this case, this element may be omitted.">
	maturityDate date (0..1) <"The final maturity date of the term deposit: the date on which the outstanding principal is due for repayment along with all outstanding accrued interest. This date should already be adjusted for any applicable business day convention.">
	principal string (0..1) <"The principal amount of the trade.">
	principalSchedule string (0..1) <"The principal amount or, in the case of an amortising or accreting transaction, schedule of principal amounts (where the step value represents the level of the principal at each step date).">
	fixedPrice string (0..1) <"Price of the principal expressed in the interest currency (\"basis price\"). Produced in the case where the principal is denominated in different units from the interest currency e.g. bullion loan/deposit.">
	fixedRateSchedule string (0..1) <"The fixed rate or fixed rate schedule expressed as explicit fixed rates and dates. In the case of a schedule, the step dates are assumed to be adjusted dates.  A per annum rate, expressed as an absolute decimal value. A fixed rate of 5% would be represented as 0.05.">
	loanDepositModelSequence0 LoanDepositModelSequence0 (0..1)
	clientMarginModel ClientMarginModel (0..1)
	dayCountFraction string (1..1) <"The day count fraction.">
	paymentDates LoanDepositPaymentDates (1..1) <"The payment dates schedule.">
	resetDates LoanDepositResetDates (0..1) <"Reset dates: only produced in the case of a loan/deposit against a floating rate.">
	loanDepositModelSequence1 LoanDepositModelSequence1 (0..1)
	payment string (0..*) <"A known payment between two parties. This component should be used for additional payments or fees (soultes), which are independent of the interest generated on the loan/deposit principal.">
	bullionSettlement FxBullionSettlement (0..1) <"Bullion settlement properties. This component may be required where one of the trade currencies is a precious metal (e.g. XAU, XPT), and should not be produced otherwise.">
	cashflows LoanDepositCashflows (0..1) <"The expanded cashflow schedule - in this section the trade is viewed as a classic interest rate stream.">
	annex LoanDepositAnnex (0..1) <"Supplementary properties to assist with interpretation of product content.">

	condition Choice0:
		optional choice noticePeriod, maturityDate

	condition Choice1:
		required choice principal, principalSchedule

	condition Choice2:
		required choice fixedRateSchedule, loanDepositModelSequence0

type LoanDepositModelSequence0:

	floatingRate LoanDepositFloatingRate (1..1) <"A floating rate index, observed on fixing dates in order to reset the rate applicable for the associated accrual period.">
	spreadSchedule string (0..*) <"Spread, or spread schedule expressed as explicit spreads and dates. In the case of a schedule, the step dates may be subject to adjustment in accordance with any adjustments specified in resetDatesAdjustments and/or paymentDatesAdjustments.  The spread is a per annum rate, expressed as an absolute decimal value. For purposes of determining a calculation period amount, if positive the spread will be added to the floating rate and if negative the spread will be subtracted from the floating rate. A positive 10 basis point spread (0.1%) would be represented as 0.001.">

type LoanDepositModelSequence1:

	interest string (1..1) <"Interest amount, payable at maturity. This amount may not be known at trade inception e.g. for loan/deposit against a floating rate.">
	loanDepositModelSequenceSequence LoanDepositModelSequenceSequence (0..1)

type LoanDepositModelSequenceSequence:

	withholdingTax Tax (1..1) <"Withholding tax payable on the interest amount.">
	netAmount string (0..1) <"Interest amount, net of withholding tax.">

type LoanDepositExtendedModel:

	earlyCallDate string (0..1)
	fxOptionStrategy LoanDepositOptionStrategy (0..1)
	certificateOfDeposit CertificateOfDeposit (0..1)
	cashSettlement LoanDepositCashSettlement (0..1)
	inflation LoanDepositInflation (0..1)

	condition Choice:
		optional choice fxOptionStrategy, certificateOfDeposit , cashSettlement

type BondCallPutOption: <"Embedded call/put option on a debt security/money market instrument (bond reference data).">

	bondCallPutOptionSequence BondCallPutOptionSequence (0..1)
	noticePeriod string (0..1) <"Exercise notice period.">

	condition Choice:
		one-of

type BondCallPutOptionSequence:

	earliestExerciseDate date (1..1) <"First exercise (call/put) date">
	noticePeriod string (0..1) <"Exercise notice period.">

type BondMarketOperation:

	value string (1..1)
	bondMarketOperationScheme string(pattern: "\\w+:(\\/?\\/?)[^\\s]+") (0..1)

type BondContractLATAMModel:

	auctionType AuctionTypeEnum (0..1) <"If present indicates the trade resulted from an auction and specifies the type">
	bondContractLATAMModelSequence BondContractLATAMModelSequence (0..1)

type BondContractLATAMModelSequence:

	dayTrade CanonicalBoolean (1..1) <"When true, indicates that the underlying bond is bought and sold on the same day">
	bondContractLATAMModelSequenceSequence BondContractLATAMModelSequenceSequence (0..1)

type BondContractLATAMModelSequenceSequence:

	rediscount CanonicalBoolean (1..1) <"When true, indicates that the bond is purchased using rediscount (Central Bank Repo)">
	intermediation CanonicalBoolean (1..*) <"When true, indicates that an \"intermediation\" account is to be used for clearing through SELIC.">

type BondContractModel: <"A group which has bond trade elements.">

	bondNominalModel BondNominalModel (1..1)
	bondPriceAndYieldModel BondPriceAndYieldModel (1..1)
	tradedFlatOfAccrued CanonicalBoolean (1..1) <"Traded Flat of Accrued Interest.">
	tradePriceBasis BondTradePriceBasisEnum (1..1) <"Traded on Price/Yield basis: properly a schema extension to BondContract.model.">
	bondValuationAmountModel BondValuationAmountModel (0..1)
	bondContractAdditionalPaymentModel BondContractAdditionalPaymentModel (0..1)
	settlementModel SettlementModel (0..1)
	settlementTransfer SettlementTransferSimple (0..1)
	bondContractExtendedModel BondContractExtendedModel (1..1)

type BondContractSWXModel:

	marketType BondMarketTypeEnum (1..1) <"Bond market type {Primary, Secondary},  produced for Swiss trades only.">
	marketOperation BondMarketOperation (0..1) <"Market operation type, produced for Swiss trades only. This drives specific wording on Swiss trade confirmations. May be a code value e.g. GB = Grey Market Buy. Dependent on (preceding element) marketType.">
	settlementInstructionOverride CanonicalBoolean (0..1) <"Produced for Swiss trades only. Where true, this flag indicates that settlement instructions are provided by an external source (SWX), in which case auto-generation of settlement instructions is suppressed and settlement processing is managed manually in the settlement system (Calypso).">

type BondContractAdditionalPaymentModel:

	additionalPayment string (1..*) <"Additonal payment(s) associated with the transaction e.g. commission, stamp duty, exchange transaction fees.              The payment may be classified by means of the optional paymentType element.">

type BondContractExtendedModel:

	bondContractSWXModel BondContractSWXModel (0..1)
	bondContractLATAMModel BondContractLATAMModel (0..1)

type BondReferenceDataModel:

	instrumentType BondInstrumentTypeEnum (0..1) <"Instrument type (Debt, Equity, MoneyMarket)">
	securityClass SecurityClass (0..1) <"Class of the security (ISO 10962 CFI code for regulatory reporting).">
	issuerSector InstitutionalSector (0..1) <"Institutional sector of the security issuer party/entity (ESA 2010 institutional sector code).">
	issueDate date (0..1) <"Issue date of the security.">
	priceBasis BondStaticPriceBasisEnum (0..1) <"Price quotation basis of the security.">
	creditRating CreditRating (0..*) <"Credit rating(s) of the security issue.">
	bondReferenceDataModelSequence BondReferenceDataModelSequence (0..1)
	floatingRate FloatingRateSimple (0..1) <"Floating rate index and spread for a (vanilla) floating rate security.">
	callOption BondCallPutOption (0..1) <"Embedded call option.">
	putOption BondCallPutOption (0..1) <"Embedded put option.">

type BondReferenceDataModelSequence:

	whenIssued CanonicalBoolean (1..1)
	isCallable CanonicalBoolean (1..1)
	isRedeemable CanonicalBoolean (1..1)

type ClearingEligibility:

	clearingEligibilitySequence0 ClearingEligibilitySequence0 (0..1)
	supervisoryBody string (0..1) <"The entity responsible for regulatory oversight of the regime e.g. CFTC, SEC, HKMA, JFSA.">
	mandatorilyClearable CanonicalBoolean (1..1) <"Whether the reported transaction is subject to mandatory clearing under the specified regime.">
	clearingEligibilitySequence1 ClearingEligibilitySequence1 (0..1)

	condition Choice:
		required choice clearingEligibilitySequence0, supervisoryBody

type ClearingEligibilitySequence0:

	regulatoryRegime string (1..1) <"The regulatory regime under which the clearing requirement is determined e.g. Dodd-Frank, HKMA">
	supervisoryBody string (0..1) <"The entity responsible for regulatory oversight of the regime e.g. CFTC, SEC, HKMA, JFSA.">

type ClearingEligibilitySequence1:

	clearingExemption CanonicalBoolean (1..1) <"Specifies whether a clearing exemption under the specified regime is claimed or asserted for the reported transaction.">
	exemptionReason ClearingExemptionReason (0..*) <"Supporting evidence for clearing exemption. This element is expected to be produced where clearingExemption = true, and should be omitted otherwise.">

type ClearingExemptionReason:

	value string (1..1)

type ExternalTradeIdentification:

	externalTradeIdentificationSequence ExternalTradeIdentificationSequence (0..1)
	uti IssuerTradeIdentifier (0..1)
	partyTradeIdentifier ReportingPartyTradeIdentifier (0..*)

	condition Choice:
		required choice externalTradeIdentificationSequence, uti

type ExternalTradeIdentificationSequence:

	usi IssuerTradeIdentifier (1..1)
	uti IssuerTradeIdentifier (0..1)

type InterAffiliateReporting: <"Reporting criteria relating to inter-affiliate transactions e.g. BNPP London Branch v BNPP Arbitrage">

	generateBackToBack CanonicalBoolean (1..1) <"Boolean flag indicating whether the reporting layer is expected to generate a back-to-back transaction for the reported inter-affiliate transaction. For the avoidance of doubt, true means that a back-to-back transaction is to be generated, false means that auto-generation of the back-to-back is suppressed.">

type InternalTradeRebooking:

	oldTradeIdentifier SystemTradeIdentifier (1..1)
	originatingEvent string (0..1) <"Originating event may be produced as qualification for trade execution e.g. in case of trade resulting from swaption physical Exercise, to signal that Real-Time report is not required.">
	trade string (1..1)

type RegulatoryEligibilityCriteria:

	assetClass string (1..1) <"The asset class for which the trade event is submitted.">
	sourcePartyReference string (1..1) <"Reference to the party which is identified as the booking party for this trade (i.e. the BNP Paribas entity which manages the trading risk position).">
	counterPartyReference string (1..1) <"Reference to the party which is identified as the external counterparty for this trade.">
	regulatoryPartyRoleModel RegulatoryPartyRoleModel (1..1)
	executionVenue ExecutionVenueInformation (0..1) <"The electronic market or execution facility on which this trade is executed.">
	regulatoryEligibilityCriteriaSequence RegulatoryEligibilityCriteriaSequence (0..1)
	eligibilityOverride RegulatoryEligibilityOverride (0..*) <"An indicator, possibly from an external source (e.g. the counterparty, reporting middleware), that the trade is eligible for reporting under the specified regime, irrespective of the preceding criteria.  * An instance of this element should be produced for each regime where an external indication of eligibility exists.">
	clearingEligibility ClearingEligibility (0..*) <"An indication of clearing eligibility under the specified  regime.  * Produced separately from the reporting eligibility override indicator, at the cost of potential repetition of the regulatory regime, to accomodate reporting applications which deal with the clearing and reporting aspects of the transaction independently.">
	interAffiliate InterAffiliateReporting (0..1) <"Reporting criteria relating to inter-affiliate transactions e.g. BNPP London Branch v BNPP Arbitrage.">

type RegulatoryEligibilityCriteriaSequence:

	regulatoryEligibilityCriteriaSequenceSequence RegulatoryEligibilityCriteriaSequenceSequence (0..1)
	marketer PersonLocation (0..1) <"The marketer or salesperson at the source party, responsible for negotiating this trade with the client/counterparty.">
	desk DeskLocation (0..1) <"The desk or business unit responsible for managing the risk position for this trade at the source party.">

	condition Choice:
		required choice regulatoryEligibilityCriteriaSequenceSequence, marketer

type RegulatoryEligibilityCriteriaSequenceSequence:

	trader PersonLocation (1..1) <"The person responsible for managing the risk position for this trade at the source party.">
	marketer PersonLocation (0..1) <"The marketer or salesperson at the source party, responsible for negotiating this trade with the client/counterparty.">

type RegulatoryEligibilityOverride extends ReportingRegimeType:

	regulatoryEligibilityOverrideSequence RegulatoryEligibilityOverrideSequence (0..1)

type RegulatoryEligibilityOverrideSequence:

	informationSource RegulatoryEligibilityInformationSource (1..1) <"An external source of regulatory eligibility information. This can be a referenced party, a referenced service (affirmationService or matchingService under processingInformation), execution venue (SEF/DCM), or a named service + (optional) provider.">
	reportingPartyModel ReportingPartyModel (0..1)
	largeSizeTrade CanonicalBoolean (0..1) <"Indicator that the trade meets block trade reporting requirements under the specified regime, as determined by the external information source/provider.  * This replicates the FpML element of the same name under partyTradeIdentifier.">
	executionType string (0..1) <"Used to describe how the trade was executed, e.g. via voice or electronically.">
	executionMethod ExecutionMethod (0..1) <"Defined method of execution on a regulated venue or facility (for example, a SEF/DCM under the provisions of the Dodd-Frank Act).">
	executionVenueType string (0..1) <"Used to describe the type of venue where trade was executed, e.g via an execution facility or privately.  * This replicates the FpML element of the same name under partyTradeIdentifier.">
	tradeRepository ExternalService (0..*) <"External repository to which the report is submitted e.g. DTCC GTR.  * A transaction report may be submitted to multiple repositories e.g. in the case where an execution venue reports to its proprietary SDR, with supplemental reporting to the DTCC/GTR.">

type RegulatoryEligibilityInformationSource:

	partyReference string (0..1) <"A reference to the external party which is the source of regulatory eligibility information.">
	serviceReference Reference (0..1) <"A reference to the extenal service which is the source of regulatory eligibility information.">
	externalServiceModel ExternalServiceModel (0..1)

	condition Choice:
		one-of

type ReportableEvent:

	tradeEventModel TradeEventModel (0..1)
	reportableEventModel ReportableEventModel (1..1)
	tradingEvent string (0..*)

type ReportableEventAcceptance extends ReportableTradeBase: <"Denotes acceptance of a reportable event advice for external processing.   This message signifies to the receiver (submitter of the original event advice) that the sender (reporting engine) has accepted responsibility for further processing of the event, and that no ReportableEventException will be sent in relation to the event.  Content (system trade identifier, party/portfolio) is echoed from the received advice message.">

	partyPortfolioModel PartyPortfolioModel (0..1)

type ReportableEventAcknowledgement extends ReportableTradeBase: <"Acknowledgement of receipt of a reportable event advice. The content (system trade identifiers, eventId, party/portfolio) is echoed from the received advice message.">

	partyPortfolioModel PartyPortfolioModel (0..1)

type ReportableEventAdvice:

	isCorrection CanonicalBoolean (1..1) <"A flag indicating whether this  message corrects an earlier advice for the same business event.">
	systemTradeIdentifier SystemTradeIdentifier (1..1) <"Primary identification of the trade in the system which reports the trade/business event.">
	bookingInformation BookingInformation (0..1) <"Information about booking actions/events in the trade capture workflow.">
	regulatoryEligibility RegulatoryEligibilityCriteria (1..1) <"Information relating to detemination of regulatory reporting obligations.">
	processingInformation ProcessingInformation (0..1) <"Information about trade processing history.">
	tradeInformation TradeInformation (0..1) <"Additional trade information: supplements content of FpML partyTradeInformation.">
	reportableEvent ReportableEvent (1..1) <"The reportable business event which is the subject of this advice.">
	partyPortfolioModel PartyPortfolioModel (1..1)

type ReportableEventException extends ReportableTradeBase: <"Processing exception for a reportable event advice. The content (system trade identifiers, eventId, party/portfolio) is echoed from the received advice message.">

	eventId EventId (0..1)
	reason ExceptionReason (1..*) <"The reason structure is used to communicate the nature of the processing error or exception. Multiple reasons may be alluded for a single exception report.">
	partyPortfolioModel PartyPortfolioModel (0..1)

type ReportableEventRetraction extends ReportableTradeBase: <"Processing exception for a reportable event advice. The content (system trade identifiers, eventId, party/portfolio) is echoed from the received advice message.">

	eventId EventId (0..1) <"Externally reported event identifier (if any).">
	reason Reason (0..*) <"The reason structure may be used to communicate the nature of the retraction.">
	partyPortfolioModel PartyPortfolioModel (0..1)

type ReportableIdentifierNotification extends ReportableTradeBase:

	tradeIdentification ExternalTradeIdentification (1..1)
	partyPortfolioModel PartyPortfolioModel (0..1)

type ReportableIdentifierStatus: <"Status of the reportable identifier e.g. {Provisional, Final}">

	identifierStatusScheme string(pattern: "\\w+:(\\/?\\/?)[^\\s]+") (0..1)

type ReportableTradeBase: <"Base type for trade reporting messages">

	systemTradeIdentifier SystemTradeIdentifier (1..1) <"Internal identifier for the transaction, assigned by the specified trade management application or service.">

type ReportingObjective extends ReportingRegimeType:

	reportingPartyModel ReportingPartyModel (1..1)
	reportingRole string (0..1) <"The role played by the reporting party in performing the specified obligation(s) under the reporting regime e.g. [Fully|Partially] Delegated, Independent.">
	reportingPurpose string (1..*)
	tradeIdentifierReference string (0..1) <"A reference to the PartyTradeIdentifier instance* associated with the reporting objective i.e. the USI used to submit a report for the specified purpose(s), to the specified regulator.  * located under reportInformation/ tradeIdentification">

type ReportInformation:

	tradeIdentification ReportingTradeIdentification (1..1) <"External identifier(s) allocated to the trade.  * Legacy USI/UTI are represented in canonical form, as issuer + tradeId (format also used by the GTR).">
	eventId string (0..1) <"The reported event identifier (if any), used in the case of a post-trade event.">
	productInformation ReportingProductInformation (0..1) <"Summary information about the reported product e.g. ISIN returned by ANNA DSB, as instance of productId.">
	tradeEnrichmentModel TradeEnrichmentModel (0..1)

type ReportingAgent: <"Agent or entity which submits a regulatory report on behalf of the reporting party, but is not represented as a party to the trade.">

	value string (1..1)
	reportingAgentScheme string(pattern: "\\w+:(\\/?\\/?)[^\\s]+") (0..1)

type ReportingRequirement extends ReportingRegimeType:

	isProductEligible NullableBoolean (0..1) <"Determination of whether the transacted product is subject to reporting under the identified regime (\"macro eligibility\").  Value \'null\' signifies that product eligibility under the associated regime has not been determined.">
	isReportable NullableBoolean (1..1) <"Determination of eligibility of the transaction for reporting under the identifed regime, taking into account product eligibility and transaction-specific criteria.   Value \'null\' signifies that reporting eligibility under the associated regime has not been determined.">
	reportingRequirementSequence ReportingRequirementSequence (0..1)

type ReportingRequirementSequence:

	reportingPartyModel ReportingPartyModel (1..1)
	reportingRole string (0..1) <"The role played by the reporting party with respect to the specified reporting requirements under the reporting regime e.g. [Fully|Partially]Delegated, Independent.">
	reportingRequirementSequenceSequence ReportingRequirementSequenceSequence (0..1)

type ReportingRequirementSequenceSequence:

	reportingAction ReportingAction (1..*) <"Details of the report submisson(s) required in fulfilment of the reporting obligation.  * There may be multiple submissions, potentially by different parties, for distinct reporting purposes.">
	tradeIdentifierReference string (0..1) <"A reference to the PartyTradeIdentifier instance* associated with the reporting requirement i.e. the USI/UTI used to submit a report for the specified purpose(s), to the specified regulator.  * located under reportInformation/ tradeIdentification">

type ReportingRegimeType: <"Regulatory reporting regime identification.  * Base type for extended types ReportingObjective, ReportingRequirement.">

	reportingRegime string (1..1) <"The regulatory reporting regime under which the reporting requirement is determined e.g. Dodd-Frank, HKMA">
	supervisoryBody string (0..*) <"The entity responsible for regulatory oversight of the reporting regime e.g. CFTC, SEC, HKMA.">

type ReportingStatus:

	value string (1..1)

type ReportingPartyTradeIdentifier extends ReportingPartyTradeIdentifier: <"Extends FpML ReportingPartyTradeIdentifier (de facto restriction of PartyTradeIdentifier) with assigningParty, identifierStatus">

	reportingPartyTradeIdentifierSequence ReportingPartyTradeIdentifierSequence (0..1)

type ReportingPartyTradeIdentifierSequence:

	identifierStatus ReportableIdentifierStatus (1..1) <"Status of the reportable identifier e.g. {Temporary, Permanent}">
	generatingParty string (0..1) <"Reference to the party responsible for generating the reportable identifier under CPMI-IOSCO Principles/ISDA Best Practice e.g. UTI generating party.  * Where the identifier status is Temporary (denoting a provisional/placeholder identifer assigned by the reporting layer, pending notification of the permanent identifier) this is the Counterparty, by definition.">

type ReportingProductInformation: <"Product identifer(s) and associated product information">

	reportingProductModel ReportingProductModel (1..1)

type ReportingTradeIdentification: <"External identifier(s) allocated to the trade.  * Legacy USI/UTI are represented in canonical form, as issuer + tradeId (also used by the GTR).">

	partyTradeIdentifier ReportingPartyTradeIdentifier (1..*)

type ReportStatusNotification: <"This message informs the recipient  (e.g. the submitting application) about the processing status of the trade event with respect to reporting to an external trade repository.">

	systemTradeIdentifier SystemTradeIdentifier (1..1) <"Identifier provided by the submitting system for the trade to which this message relates.">
	reportStatusNotificationSequence ReportStatusNotificationSequence (0..1)
	reportInformation ReportInformation (0..1) <"Supplementary trade identification and regulatory surveillance information, added in the outgoing message to an external trade repository.">
	reportStatus ReportingStatus (1..1) <"Status of the reported trade event, with respect to processing at the external repository (e.g. Submitted, Acknowledged, Matched)">
	partyPortfolioModel PartyPortfolioModel (0..1)

type ReportStatusNotificationSequence:

	partyRole RegulatoryPartyRole (1..1) <"Container for a set of party references, indicating the roles played by parties to the trade (source party, counterparty, clearer ...).   These can be used to identify the reporting party and/or submitting party, in terms of their relationship to the trade.">
	reportingRequirement ReportingRequirement (0..*) <"Regulatory reporting requirement(s), determined for the submitted trade event with respect to each known reporting regime.">
	reportSubmission ReportSubmission (0..1) <"Details of the report submission which caused the notified state change.">

	condition Choice:
		required choice reportingRequirement, reportSubmission

type ReportSubmission:

	submittingParty string (0..1) <"Reference to a party responsible for perfoming the report submission.">
	submittingAgent ReportingAgent (0..1) <"Agent or entity responsible for performing the report submission on behalf of the reporting party, but which is not a party to the trade e.g. MarkitWire.">
	reportingObjective ReportingObjective (1..*) <"The reporting obligation(s) actioned by this report submission. Multiple reporting objectives may exist under multiple reporting regimes.">
	tradeRepository ExternalService (1..1) <"External repository to which the report is submitted e.g. DTCC GTR.">

	condition Choice:
		required choice submittingParty, submittingAgent

type ReportingAction:

	submittingParty string (0..1) <"Reference to a party responsible for perfoming the report submission.">
	submittingAgent ReportingAgent (0..1) <"Agent or entity responsible for performing the report submission on behalf of the reporting party, but which is not a party to the trade e.g. MarkitWire.">
	reportingPurpose string (1..*) <"Reporting obligation(s) actioned by the report submission e.g. Real-Time, PET, Confirmation.">

	condition Choice:
		required choice submittingParty, submittingAgent

type TradeInformation: <"Additional trade information - supplementary to, or substituting for, FpML PartyTradeInformation.">

	entitySigning EntitySigning (0..1) <"Entity signing properties. This element should only be produced for trade which is a booked as part of an entity signing arrangement, and must be omitted otherwise.">
	collateral Collateral (0..1) <"Collateral information.">
	originatingTrade LinkedTradeInformation (0..1) <"Ultimate ancestor of the reported transaction e.g. first transaction in an \"interlife\" chain of which the reported transaction is a member.">

type RegulatoryReportingMessageModel: <"Message types produced in a regulatory reporting workflow.">

	reportableEventAdvice ReportableEventAdvice (0..1) <"Advice of a reportable business event on a trade in the identified system.">
	reportableEventRetraction ReportableEventRetraction (0..1) <"Retraction of a reportable business event on a trade in the identified system.  This message signifies that a prior reportable event advice, sharing the same correlation id, has been revoked.">
	regulatoryReportingResponseModel RegulatoryReportingResponseModel (0..1)
	regulatoryReportingNotificationModel RegulatoryReportingNotificationModel (0..1)

	condition Choice:
		one-of

type RegulatoryReportingNotificationModel: <"Asynchronous notification concerning a regulatory reporting process.">

	reportStatusNotification ReportStatusNotification (0..1) <"This message informs the recipient  (e.g. the submitting application, or other interested parties) about the processing status of the trade event, with respect to reporting to an external trade repository.  This message may be triggered by the initial determination by the reporting engine of the external reporting requirement(s), or in response to an external reporting event.">
	reportableIdentifierNotification ReportableIdentifierNotification (0..1) <"Message informing the recipient about regulatory identifiers (USI, UTI) assigned to the specified transaction, as a result of confirmation matching or other external identifier resolution mechanism.">

	condition Choice:
		one-of

type RegulatoryReportingResponseModel: <"Message types produced in synchronous response to a reportableEvent-Advice or -Retraction.">

	reportableEventAcceptance ReportableEventAcceptance (0..1) <"Denotes acceptance of a reportable event advice for external processing.   This message signifies to the receiver (submitter of the original event advice) that the sender (reporting engine) has accepted responsibility for further processing of the event, and that no ReportableEventException will be sent in relation to the event.  Content (system trade identifier, party/portfolio) is echoed from the received advice message.">
	reportableEventException ReportableEventException (0..1) <"Signifies to the receiver (submitter of the original reportable event advice)  that a processing exception has occurred in relation the event, and that the sender (reporting engine) is unable to continue processing the event.  The receiver may require to take remedial action in order to resolve the exception condition.">

	condition Choice:
		one-of

type ReportableEventModel:

	reportableEventModelSequence0 ReportableEventModelSequence0 (0..1)
	reportableEventModelSequence1 ReportableEventModelSequence1 (0..1)
	increase string (0..1)
	novation string (0..1)
	withdrawal string (0..1)
	rebooking InternalTradeRebooking (0..1)

	condition Choice:
		one-of

type ReportableEventModelSequence0:

	originatingEvent string (0..1) <"Originating event may be produced as qualification for trade execution e.g. in case of trade resulting from swaption physical Exercise, to signal that Real-Time report is not required.">
	trade string (1..1)

type ReportableEventModelSequence1:

	terminatingEvent string (0..1) <"Terminating event may be produced as qualification for amendment or termination event e.g. in case of Portfolio- Compression, to signal that Real-Time report is not required.">
	amendment string (0..1)
	termination string (0..1)

	condition Choice:
		required choice amendment, termination

type ReportingPartyModel:

	reportingParty string (0..1) <"Reporting Party: the party responsible for submission of transaction reporting under the specified regime.">
	nonReportingParty string (0..1) <"Non-reporting party: counterpart to the Reporting Party in a reportable transaction.  * This choice is available for regimes e.g. Canada where reporting to local jurisdictions is differentiated at counterparty level.">

	condition Choice:
		one-of

type TradeEnrichmentModel:

	collateralizationType string (1..1) <"Specifies whether this party posts collateral. For Recordkeeping, the collateralization type refers to collateral that is posted by this firm, and One-Way is not meaningful. In other words, if the collateralization type is Full, this trade is fully collateralized by this party. For Transparency view, the options include Full, Partial, Uncollateralized, and One-Way.">
	collateralPortfolio string (0..1) <"Provides a name, code, or other identifier for the collateral portfolio to which the reported transaction belongs.">
	masterAgreement string (0..1) <"The agreement executed between the parties and intended to govern all OTC derivatives transactions between those parties.">

type TradeEventModel:

	eventType TradeEventTaxonomy (1..1) <"Event classification according to FiML trade event taxonomy">
	eventId string (0..*) <"A unique identifier for the event in the originating system - may be used for external correlation e.g. for regulatory reporting to a SDR.  Multiple alternate identifiers may exist for the same event, as originated or used by different systems.">
	eventDateTime zonedDateTime (0..1) <"Optional timestamp for the reportable event.  This element is available to report a timestamp for non-negotiated events, which do not have an execution date/time (correction, cancellation/withdrawal), and should be omitted otherwise.  * Redundant in the case of negotiated events, for which the execution date/time is reportable.">

type ExchangeTraded: <"Extends FpML UnderlyingAsset with addition of deliveryType">

	deliveryType string (0..1)

type ExchangeTradedOption extends ExchangeTradedOptionCore:

	exerciseStyle string (0..1) <"Exercise style of the option (American, Bermuda, European)">
	strikeUnits string (0..1) <"Units in which the option strike is expressed e.g. currency Amount, BasisPoints, Percentage, Rate.">
	underlyer string (0..1) <"Underlyer of the option e.g. a listed future.">
	settlementType string (0..1) <"Settlement method for the contract (Cash, Physical). This value is used to populate the \"Delivery Type\" field for regulatory reporting (CFTC, ESMA).">

type Commodity:

	commodityProductModel CommodityProductModel (1..1)

type CommodityFloatingPriceLeg: <"FiML FloatingPriceLeg definition, compatible with CommoditySwapLeg">

	commodity Commodity (1..1) <"Specifies the underlying instrument. Only underlyers of type Commodity are supported.">
	commodityFloatingLegCalculationModel CommodityFloatingLegCalculationModel (1..1)
	schedule CommodityScheduleFloating (0..1)

type CommodityPeriod: <"Commodity payment/fixing period">

	startDate date (1..1) <"Adjusted period start date">
	endDate date (1..1) <"Adjusted period end date.">

type CommodityPriceSpread:

	component CommodityPriceSpreadComponent (2..2) <"Commodity price spread components (2x)">

type CommodityPriceSpreadComponent:

	commodity Commodity (1..1) <"Reference commodity">
	multiplier number (1..1) <"Multiplier applied to the reference commodity price participating in the spread calculation.">

type CommodityPriceSpreadLeg:

	spread CommodityPriceSpread (1..1) <"Commodity price spread">
	commodityFloatingLegCalculationModel CommodityFloatingLegCalculationModel (1..1)
	schedule CommodityScheduleFloating (0..1)

type CommodityScheduleBase: <"Schedule of commodity floating payment/fixing periods (one-to-many)">

	legReference CommoditySwapLegReference (0..1) <"Reference to the commodity swap leg to which this schedule relates.">
	quantityUnit string (0..1) <"Notional Quantity unit in which the Schedule is denominated.">

type CommodityScheduleFloating extends CommodityScheduleBase: <"Schedule of commodity floating payment/fixing periods (one-to-many)">

	period CommoditySchedulePeriodFloating (1..*) <"Commodity floating payment/ fixing period.">

type CommoditySchedulePeriodBase:

	calculationPeriod CommodityPeriod (1..1) <"Period for which the payment is generated.">
	quantity number (1..1) <"Amount of commodity per schedule period.">
	totalQuantity number (0..1) <"Total Notional Quantity per Calculation Period.">
	notionalQuantityReference Reference (0..1) <"Reference to a Commodity Notional Quantity specified elsewhere in the document.">
	paymentDate date (1..1) <"Adjusted payment date.">

	condition Choice:
		optional choice totalQuantity, notionalQuantityReference

type CommoditySchedulePeriodFloating extends CommoditySchedulePeriodBase:

	fixingPeriod CommodityPeriod (1..1) <"Period over which the underyling price or rate is observed.">
	spread number (0..1) <"Spread (margin) applied to the observed price or rate.">

type CommoditySwaptionUnderlying: <"Extend FpML commodity swaption underlyer type (economic content of commodity swap product) with addition of optional floating payment/fixing schedule.">

	additionalPayment string (0..*) <"Additional payments between the principal parties e.g. upfront fee, periodic premium.">
	schedule CommodityScheduleFloating (0..2) <"Commodity floating payment/fixing schedule. In the case where multiple schedules exist (up to two), each schedule should reference the commodity swap leg to which it relates by means of the legReference element.  * A single schedule without legReference is construed as applying to the parent commoditySwap as a whole.">

type CommoditySwapLegReference extends Reference: <"Reference to a commodity swap leg located elsewhere in the document.">

type CommodityProductModel:

	commodityProductModelSequence CommodityProductModelSequence (0..1)
	specifiedPriceDescription string (0..1)
	commodityProductDeliveryModel CommodityProductDeliveryModel (1..1)

	condition Choice:
		required choice commodityProductModelSequence, specifiedPriceDescription

type CommodityProductModelSequence:

	specifiedPrice string (1..1) <"The \'specified Price\' describes the nature of the underlying price that is observed. It must be be stated in the underlyer definition as it is not defined in the Commodity Reference Price. Example values of \'specifiedPrice\' are \'Settlement\' (for a futures contract) and \'WeightedAverage\' (for some published prices and indices).">
	specifiedPriceDescription string (0..1)

type Reference: <"Reference element, an intra-document pointer.">

	href string (1..1)

type SecLendInitiation:

	syntheticSettlementDate date (0..1) <"Synthetic settlement date: dedicated value to support reporting of Open repo as synthetic transaction under MMSR regime.">

type SecLendTermination:

	syntheticSettlementDate date (0..1) <"Synthetic settlement date: dedicated value to support reporting of Open repo as synthetic transaction under MMSR regime.">
