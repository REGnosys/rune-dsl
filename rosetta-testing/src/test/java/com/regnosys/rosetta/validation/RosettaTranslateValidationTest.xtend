/*
 * generated by Xtext 2.10.0
 */
package com.regnosys.rosetta.validation

import com.regnosys.rosetta.tests.util.ModelHelper
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.extensions.InjectionExtension
import org.eclipse.xtext.testing.validation.ValidationTestHelper
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith

import static com.regnosys.rosetta.rosetta.expression.ExpressionPackage.Literals.*
import static com.regnosys.rosetta.rosetta.translate.TranslatePackage.Literals.*
import javax.inject.Inject

@ExtendWith(InjectionExtension)
@InjectWith(MyRosettaInjectorProvider)
class RosettaTranslateValidationTest implements RosettaIssueCodes {

	@Inject extension ValidationTestHelper
	@Inject extension ModelHelper
	
	@Test
	def void testDuplicateParameterNamesAreDisallowed() {
	    val model = '''
	    type Foo:
	       a string (1..1)
	    
	    type Bar:
	       b string (1..1)
	    
	    translate source FooBar {
	        translate var Bar, var string to Foo {
	        	a: var
	        }
	    }
	    '''.parseRosetta
		
		model.assertError(TRANSLATION_PARAMETER, null,
			"Duplicate parameter name `var`."
		)
	}
	
	@Test
	def void testNoUnnamedParametersWhenMultipleInputs() {
	    val model = '''
	    type Foo:
	       a string (1..1)
	    
	    type Bar:
	       b string (1..1)
	    
	    translate source FooBar {
	        translate bar Bar, string to Foo {
	        	a: item
	        }
	    }
	    '''.parseRosetta
		
		model.assertError(TRANSLATION_PARAMETER, null,
			"Cannot have unnamed parameters when there are multiple parameters."
		)
	}
	
	@Test
	def void testMultiToSingleCardinalityIsDisallowed() {
	    val model = '''
	    type Foo:
	       a string (1..1)
	    
	    type Bar:
	       b string (0..2)
	    
	    translate source FooBar {
	        translate Bar to string:
	        	b
	    }
	    '''.parseRosetta
		
		model.assertError(ROSETTA_SYMBOL_REFERENCE, null,
			"Expected an expression of single cardinality, but was multi."
		)
	}
	
	@Test
	def void testMatchingTranslationMustExist() {
	    val model = '''
	    type Foo:
	    	a string (1..1)
	    
	    type Bar:
	    	b Qux (1..1)
	    
	    type Qux:
	    	c string (1..1)
	    
	    translate source FooBar {
	        translate Bar to Foo {
	        	a: translate b to string
	        }
	    }
	    '''.parseRosetta
		
		model.assertError(TRANSLATE_DISPATCH_OPERATION, null,
			"No translation exists to translate Qux into string."
		)
	}
	
	@Test
	def void testMatchingTranslationExists() {
	    '''
	    type Foo:
	    	a string (1..1)
	    
	    type Bar:
	    	b Qux (1..1)
	    
	    type Qux:
	    	c string (1..1)
	    
	    translate source FooBar {
	        translate Bar to Foo {
	        	a: translate b, 42 to string
	        }
	        
	        translate qux Qux, context number to string:
	        	qux -> c
	    }
	    '''.parseRosettaWithNoIssues
	}
	
	@Test
	def void testMatchingTranslationExistsInParent() {
	    '''
	    type Foo:
	    	a string (1..1)
	    
	    type Bar:
	    	b Qux (1..1)
	    
	    type Qux:
	    	c string (1..1)
	    
	    translate source Parent {
	        translate Qux to string:
	        	c
	    }
	    
	    translate source FooBar extends Parent {
	        translate Bar to Foo {
	        	a: translate b to string
	        }
	    }
	    '''.parseRosettaWithNoIssues
	}
	
	@Test
	def void testMatchingTranslationWithExtendsExists() {
	    '''
	    type Foo:
	    	a AttrType (1..1)
	    
	    type SuperAttrType:
	    
	    type AttrType extends SuperAttrType:
	    	sub string (1..1)
	    
	    type Bar:
	    	b Qux (1..1)
	    
	    type SuperQux:
	    
	    type Qux extends SuperQux:
	    	c string (1..1)
	    
	    translate source FooBar {
	        translate Bar to Foo {
	        	a: translate b to AttrType
	        }
	        
	        translate SuperQux to AttrType:
	        	empty
	    }
	    '''.parseRosettaWithNoIssues
	}
}
